<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
        <title>彭友谊的博客</title>
        <description>彭友谊的博客 - pengyouyi</description>
        <link></link>
        <atom:link href="" rel="self" type="application/rss+xml" />
        <lastBuildDate>Fri, 10 Nov 2017 17:05:01 +0800</lastBuildDate>
        <pubDate>Fri, 10 Nov 2017 17:05:01 +0800</pubDate>
        <ttl>60</ttl>


        <item>
                <title>js继承</title>
                <description>&lt;h1 id=&quot;prototype-chain&quot;&gt;原型链继承-Prototype chain&lt;/h1&gt;

&lt;p&gt;借助原型链实现继承, 引起&lt;code&gt;引用类型的原型属性会被所有实例共享&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Parent2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'parent2'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;Parent2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prototype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;say&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Child2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'child2'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;Child2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prototype&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Parent2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// 缺点是父类构造函数执行两次&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Child2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;say&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id=&quot;constructed-function&quot;&gt;借助构造函数继承-constructed function&lt;/h1&gt;

&lt;p&gt;借助构造函数实现继承,&lt;code&gt;子类不能继承父类prototype上的方法&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;
&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Parent1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'parent1'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;Parent1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prototype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;say&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Child1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'child1'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;Parent1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Child1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id=&quot;combination&quot;&gt;组合继承-combination&lt;/h1&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Parent3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'parent3'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;play&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;Parent3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prototype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;say&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Child3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'child3'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;Parent3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;Child3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prototype&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Parent3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;s3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Child3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;s4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Child3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;s3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;play&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;s3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;play&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;s4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;play&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;optimize&quot;&gt;组合继承优化-optimize&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;Child.prototype = Parent.prototype&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// 组合继承，优化1&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Parent4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'parent4'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;play&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;Parent4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prototype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;say&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Child4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'child4'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;Parent4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;Child4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prototype&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Parent4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prototype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// 缺点是，子类指向的构造函数与父类是一个&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Child4.prototype.constructor = Parent4;  // 这样无法区分父类的原型对象了&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;s5&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Child4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;s6&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Child4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;s5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;s6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;s5&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Child4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;s5&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Parent4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// true, true&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;s5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// Parent4&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;2-optimize&quot;&gt;组合继承优化2-optimize&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;Child.prototype = Object.create(Parent.prototype)&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Parent5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'parent5'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;play&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Child5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'child5'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;Parent5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;Child5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prototype&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Parent5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prototype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;Child5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prototype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;constructor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Child5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;s7&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Child5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;s7&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Child5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;s7&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Parent5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// true, true&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;s7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// Child5&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id=&quot;class&quot;&gt;使用 class 关键字&lt;/h1&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;kr&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Polygon&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;height&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;width&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Square&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Polygon&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sideLength&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kr&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sideLength&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sideLength&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;area&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;height&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sideLength&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;newLength&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;height&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;newLength&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;width&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;newLength&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;square&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Square&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id=&quot;demo&quot;&gt;写一个贴近实际开发原型链继承的例子-demo&lt;/h1&gt;

&lt;p&gt;写一个封装DOM查询的例子&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Elem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;elem&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;Elem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prototype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;html&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;elem&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;elem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;elem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;innerHTML&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 链式操作&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;elem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;innerHTML&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;Elem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prototype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;on&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;elem&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;elem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;elem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;elem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'type'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;elem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;attachEvent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;elem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;attachEvent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'on'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;elem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'on'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;div1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Elem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'div1'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;div1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'有'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;div1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'click'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'click'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'youyi'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id=&quot;more&quot;&gt;更多-more&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Inheritance_and_the_prototype_chain&quot;&gt;mozilla.org/Inheritance_and_the_prototype_chain&lt;/a&gt;&lt;/p&gt;
</description>
                <link>/js/2017/11/10/js-object-inherit</link>
                <guid>/js/2017/11/10/js-object-inherit</guid>
                <pubDate>Fri, 10 Nov 2017 00:00:00 +0800</pubDate>
        </item>

        <item>
                <title>js对象</title>
                <description>&lt;h1 id=&quot;js&quot;&gt;js对象&lt;/h1&gt;

&lt;p&gt;创建对象的几种方式&lt;/p&gt;

&lt;p&gt;⑴ 字面量&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;o1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'o1'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;o11&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'o11'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;o1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// Object &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;⑵ 通过构造函数&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;M&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;o2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'o2'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;⑶ Object.create&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;P&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'o3'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;o3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;P&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;rd&quot;&gt;
    &lt;img src=&quot;/assets/images/2017/10-11-12/11-09-1.png&quot; alt=&quot;&quot;&gt;
&lt;/div&gt;

&lt;h1 id=&quot;classify&quot;&gt;对象分类-classify&lt;/h1&gt;

&lt;p&gt;❃  普通对象：有__proto__属性（指向其原型链），没有prototype属性。&lt;br&gt;&lt;br&gt;
❃  原型对象：原型对象（Person.prototype）是 构造函数（Person）的一个实例。(Person.prototype 原型对象还有constructor属性，指向构造函数对象)&lt;br&gt;&lt;br&gt;
❃  (构造)函数对象：凡是通过new Function()创建的都是构造函数对象。拥有__proto__、prototype属性（指向原型对象）。  &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Function、Object、Array、Date、String、自定义函数&lt;br&gt;&lt;/li&gt;
&lt;li&gt;特例： Function.prototype 是原型对象，却是函数对象 &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;在 Person 创建的时候，创建了一个它的实例对象并赋值给它的 prototype&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// 原型对象&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prototype&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;err&quot;&gt;函数对象&lt;/span&gt;  
&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;f1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){};&lt;/span&gt; 
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;f2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){};&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;f3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'str'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'console.log(str)'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;f1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;//function  &lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;f2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;//function  &lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;f3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;//function  &lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;//function  &lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;//function  &lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;//function  &lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;//function  &lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;//function &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Function.prototype是个例外，它是原型对象，却又是函数对象，作为一个函数对象，它又没有prototype属性。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){};&lt;/span&gt;  

&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prototype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Object  &lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prototype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Object  &lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prototype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// function  它是特殊 Function  &lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prototype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prototype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//undefined 函数对象却没有prototype属性 &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;通过 new Function( ) 产生的对象都是函数对象。因为 A 是函数对象，所以Function.prototype 是函数对象。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;Function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prototype&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id=&quot;new&quot;&gt;new运算符&lt;/h1&gt;

&lt;p&gt;描述 new 一个对象的过程&lt;/p&gt;

&lt;p&gt;⑴ 创建一个新对象, 它继承了对象类型的原型，即foo.prototype&lt;br&gt;
⑵ 将构造函数的作用域赋给新对象（因此this就指向了这个新对象）&lt;br&gt;
⑶ 执行构造函数中的代码（为这个新对象添加属性，即对this赋值）&lt;br&gt;
⑷ 返回this。如果构造函数return了一个新的“对象”，那么这个对象就会取代整个new出来的结果。如果构造函数没有return对象，那么就会返回步骤1所创建的对象，即隐式返回this。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{};&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'class-1'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// return this;  // 默认有这一行&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'zhangsan'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;foo1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'lisi'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;22&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;//创造多个对象&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;new2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;o&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prototype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'object'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id=&quot;instanceof&quot;&gt;instanceof&lt;/h1&gt;

&lt;p&gt;instanceof 运算符用来检测 constructor.prototype 是否存在于参数 object 的原型链上。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;nx&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;constructor&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;object instanceof constructor 的判断逻辑是：&lt;/strong&gt;&lt;br&gt;
object 的 __proto__ 一层一层往上，能否对应到constructor.prototype&lt;/p&gt;

&lt;div class=&quot;rd&quot;&gt;
    &lt;img src=&quot;/assets/images/2017/10-11-12/11-09-2.png&quot; alt=&quot;&quot;&gt;
&lt;/div&gt;

&lt;p&gt;㈠ 使用 instanceof 就是判断一个实例是否属于某种类型。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// 判断 foo 是否是 Foo 类的实例&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){}&lt;/span&gt; 
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; 
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;㈡ instanceof 可以在继承关系中用来判断一个实例是否属于它的父类型。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// 判断 foo 是否是 Foo 类的实例 , 并且是否是其父类型的实例&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Aoo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){}&lt;/span&gt; 
&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){}&lt;/span&gt; 
&lt;span class=&quot;nx&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prototype&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Aoo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//JavaScript 原型继承&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; 
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//true &lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Aoo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/instanceof&quot;&gt;https://developer.mozilla.org/instanceof&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.ibm.com/developerworks/cn/web/1306_jiangjj_jsinstanceof/&quot;&gt;https://www.ibm.com/developerworks/cn/web/1306_jiangjj_jsinstanceof/&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;hasownproperty&quot;&gt;hasOwnProperty&lt;/h1&gt;

&lt;p&gt;hasOwnProperty() 方法会返回一个布尔值，指示对象是否具有指定的属性作为自身（不继承）属性。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;nx&quot;&gt;o&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prop&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'exists'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;hasOwnProperty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'prop'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;             &lt;span class=&quot;c1&quot;&gt;// 返回 true&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;hasOwnProperty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'toString'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;         &lt;span class=&quot;c1&quot;&gt;// 返回 false&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;hasOwnProperty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'hasOwnProperty'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;// 返回 false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;buz&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;fog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'stack'&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;buz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 高级浏览器已经在 for in 中屏蔽了来自原型的属性&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 但是这里建议大家还是加上这个判断，保证程序的健壮性&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;buz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;hasOwnProperty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;this is fog (&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;) for sure. Value: &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;buz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty&quot;&gt;developer.mozilla.org/hasOwnProperty&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;class&quot;&gt;类的声明与实例化-class&lt;/h1&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// 类的声明&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Animal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'name'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// ES6中class的声明&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Animal2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// 实例化&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Animal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Animal2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id=&quot;more&quot;&gt;更多-more&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Inheritance_and_the_prototype_chain&quot;&gt;mozilla.org/Inheritance_and_the_prototype_chain&lt;/a&gt;&lt;/p&gt;
</description>
                <link>/js/2017/11/09/js-object</link>
                <guid>/js/2017/11/09/js-object</guid>
                <pubDate>Thu, 09 Nov 2017 00:00:00 +0800</pubDate>
        </item>

        <item>
                <title>前后端如何通信</title>
                <description>&lt;h1 id=&quot;method&quot;&gt;前后端通讯的方式-method&lt;/h1&gt;

&lt;p&gt;1、AJAX(同源下的通讯)&lt;br&gt;
2、WebSocket（不受同源策略限制）&lt;br&gt;
3、CORS（支持跨域通讯也支持同源通讯）&lt;/p&gt;

&lt;h1 id=&quot;more&quot;&gt;更多-more&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;http://blog.sina.com.cn/s/blog_c112a2980102xm9b.html&quot;&gt;http://blog.sina.com.cn/s/blog_c112a2980102xm9b.html&lt;/a&gt;&lt;/p&gt;
</description>
                <link>/http/2017/11/08/Communication-front-end</link>
                <guid>/http/2017/11/08/Communication-front-end</guid>
                <pubDate>Wed, 08 Nov 2017 00:00:00 +0800</pubDate>
        </item>

        <item>
                <title>同源策略及限制</title>
                <description>&lt;h1 id=&quot;same-origin-policy&quot;&gt;同源策略-Same-origin policy&lt;/h1&gt;

&lt;h2 id=&quot;meaning&quot;&gt;含义 - Meaning&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;协议相同 window.location.protocol&lt;br&gt;&lt;br&gt;
域名相同 window.location.hostname&lt;br&gt;&lt;br&gt;
端口相同 window.location.port  &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&quot;http://www.w3school.com.cn/jsref/dom_obj_location.asp&quot;&gt;location对象&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;域名、端口、协议，其中任何一个不同都算跨域。&lt;/p&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;URL&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;th&gt;是否允许通信&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;http://www.a.com/a.js&quot;&gt;http://www.a.com/a.js&lt;/a&gt; &lt;br/&gt; &lt;a href=&quot;http://70.32.92.74/b.js&quot;&gt;http://70.32.92.74/b.js&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;域名和域名对应IP&lt;/td&gt;
&lt;td&gt;不允许&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;http://www.a.com/a.js&quot;&gt;http://www.a.com/a.js&lt;/a&gt; &lt;br/&gt; &lt;a href=&quot;http://script.a.com/b.js&quot;&gt;http://script.a.com/b.js&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://blog.csdn.net/qq_26744901/article/details/52701116&quot;&gt;主域相同，子域不同&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;不允许&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;http://www.a.com/a.js&quot;&gt;http://www.a.com/a.js&lt;/a&gt; &lt;br/&gt; &lt;a href=&quot;http://a.com/b.js&quot;&gt;http://a.com/b.js&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://blog.csdn.net/yummy_go/article/details/50675421&quot;&gt;同一域名，不同二级域名&lt;/a&gt;（同上）&lt;/td&gt;
&lt;td&gt;不允许&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;p&gt;在跨域问题上，域仅仅是通过“URL的首部”来识别，而不会去尝试判断相同的ip地址对应着两个域，或是两个域是否在同一个IP上。&lt;/p&gt;

&lt;h2 id=&quot;purpose&quot;&gt;目的 - purpose&lt;/h2&gt;

&lt;p&gt;同源政策的目的，是为了保证用户信息的安全，防止恶意的网站窃取数据。&lt;/p&gt;

&lt;p&gt;&amp;quot;同源政策&amp;quot;是必需的，否则 Cookie 可以共享，互联网就毫无安全可言了。&lt;/p&gt;

&lt;h2 id=&quot;limit-range&quot;&gt;限制范围 - Limit range&lt;/h2&gt;

&lt;p&gt;如果非同源，共有三种行为受到限制。&lt;/p&gt;

&lt;p&gt;（1） Cookie、LocalStorage 和 IndexDB 无法读取。&lt;br&gt;&lt;br&gt;
（2） DOM 无法获得。&lt;br&gt;&lt;br&gt;
（3） AJAX 请求不能发送。  &lt;/p&gt;

&lt;h1 id=&quot;cross-domain-tags&quot;&gt;跨域的标签-Cross domain Tags&lt;/h1&gt;

&lt;h2 id=&quot;tags&quot;&gt;可以跨域的标签-Tags&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;img src=xxx&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;link href=xxx&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;script src=xxx&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;iframe&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;这些标签可以跨域加载资源，而不受同源策略的限制。这些带&amp;quot;src&amp;quot;属性的标签每次加载时，实际上是由浏览器发起了一次GET请求。不同于 XMLHttpRequest 的是，通过src属性加载的资源，浏览器限制了JavaScript的权限，使其不能读、写返回的内容。&lt;/p&gt;

&lt;h2 id=&quot;use-scenarios&quot;&gt;跨域的标签的使用场景-Use scenarios&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; 用于打点统计，统计网站可能是其他域&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;link&amp;gt; &amp;lt;script&amp;gt;&lt;/code&gt; 可以使用CDN，CDN的也是其他域&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; 可以用于JSONP&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;avoid&quot;&gt;规避同源策略-Avoid&lt;/h1&gt;

&lt;p&gt;㊀ document.domain&lt;br&gt;&lt;br&gt;
㊁ window.name&lt;br&gt;&lt;br&gt;
㊂ localtion.hash&lt;br&gt;&lt;br&gt;
㊃ window.postMessage (HTML5)&lt;br&gt;&lt;br&gt;
㊄ JSONP&lt;br&gt;&lt;br&gt;
㊅ Websocket协议&lt;br&gt;&lt;br&gt;
㊆ CORS跨域资源共享（W3C标准，支持跨域通信的AJAX）  &lt;/p&gt;

&lt;h1 id=&quot;document-domain&quot;&gt;通过修改document.domain来跨子域&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;document.domain跨域原理&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;如果两个window或者frames包含的脚本可以把domain设置成一样的值，那么就可以规避同源策略，每个window之间可以互相沟通。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;这种方式也不是一直都有用，因为端口号是在内部保存的，有可能被保存成null。换句话说，example.com的端口号80，在我们更新document.domain属性的时候可能会变成null。为null的端口可能不被认为是80，这主要依赖浏览器实现。  &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;document.domain的设置是有限制的，我们只能把&lt;code&gt;document.domain设置成自身或更高一级的父域&lt;/code&gt;，且&lt;code&gt;主域必须相同&lt;/code&gt;。例如：a.b.example.com 中某个文档的document.domain 可以设成a.b.example.com、b.example.com 、example.com中的任意一个，但是不可以设成 c.a.b.example.com,因为这是当前域的子域，也不可以设成baidu.com,因为主域已经不相同了。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;cookie&quot;&gt;Cookie&lt;/h2&gt;

&lt;p&gt;Cookie 是服务器写入浏览器的一小段信息，只有同源的网页才能共享。但是，两个网页一级域名相同，只是二级域名不同，浏览器允许通过设置document.domain共享 Cookie。&lt;/p&gt;

&lt;h2 id=&quot;document-domain-cookie&quot;&gt;document.domain获取Cookie例子&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;场景：A网页是 &lt;a href=&quot;http://w1.example.com/a.html&quot;&gt;http://w1.example.com/a.html&lt;/a&gt; ，B网页是 &lt;a href=&quot;http://w2.example.com/b.html&quot;&gt;http://w2.example.com/b.html&lt;/a&gt; ，那么只要设置相同的document.domain，两个网页就可以共享Cookie。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;domain&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'example.com'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;A网页通过脚本设置一个 Cookie。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cookie&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;test1=hello&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;B网页就可以读到这个 Cookie。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;allCookie&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cookie&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;document.domain这种方法只适用于 Cookie 和 iframe 窗口，LocalStorage 和 IndexDB 无法通过这种方法.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;document-domain-iframe&quot;&gt;document.domain + iframe例子&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;场景：&lt;a href=&quot;http://a.study.cn/a.html&quot;&gt;http://a.study.cn/a.html&lt;/a&gt; 请求 &lt;a href=&quot;http://b.study.cn/b.html&quot;&gt;http://b.study.cn/b.html&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;a.html&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;charset=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Insert title here&lt;span class=&quot;nt&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;domain&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'study.cn'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;iframe&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'a'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;win&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;iframe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;contentWindow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

                &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;doc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;win&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;win&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

                &lt;span class=&quot;nx&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;win&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;iframe&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'a'&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'http://b.study.cn/b.html'&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;onload=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'test()'&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;b.html&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;charset=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Insert title here&lt;span class=&quot;nt&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;domain&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'study.cn'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    我是b.study.cn的body
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;运行效果截图:&lt;/p&gt;

&lt;div class=&quot;rd&quot;&gt;
    &lt;img src=&quot;/assets/images/2017/10-11-12/11-07-1.png&quot; alt=&quot;&quot;&gt;
&lt;/div&gt;

&lt;p&gt;可以通过js访问到iframe中的各种属性和对象.&lt;/p&gt;

&lt;p&gt;如果你想在 &lt;a href=&quot;http://a.study.cn/a.html&quot;&gt;http://a.study.cn/a.html&lt;/a&gt; 页面中通过ajax直接请求页面 &lt;a href=&quot;http://b.study.cn/b.html&quot;&gt;http://b.study.cn/b.html&lt;/a&gt; ，即使你设置了相同的document.domain也还是不行的.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;解决：如果你想通过ajax的方法去与不同子域的页面交互，除了使用jsonp的方法外，还可以用一个隐藏的iframe来做一个代理。原理就是让这个iframe载入一个与你想要通过ajax获取数据的目标页面处在相同的域的页面，所以这个iframe中的页面是可以正常使用ajax去获取你要的数据的，然后就是通过我们刚刚讲得修改document.domain的方法，让我们能通过js完全控制这个iframe，这样我们就可以让iframe去发送ajax请求，然后收到的数据我们也可以获得了。?????&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;document.domain跨域缺点&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;1、安全性，当一个站点（b.a.com）被攻击后，另一个站点（c.a.com）会引起安全漏洞。&lt;br&gt;&lt;br&gt;
2、如果一个页面中引入多个iframe，要想能够操作所有iframe，必须都得设置相同domain。&lt;/p&gt;

&lt;h1 id=&quot;location-hash-iframe&quot;&gt;location.hash + iframe&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;location.hash跨域原理：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;hash改变不刷新页面，search改变刷新页面&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;location.hash跨域场景：&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;当前页面A通过iframe或iframe嵌入了跨域的页面B&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;父窗口A可以把信息，写入子窗口的片段标识符。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;B&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementsByTagName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'iframe'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;src&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;src&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'#'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;子窗口B通过监听&lt;code&gt;hashchange事件&lt;/code&gt;得到通知&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onhashchange&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;location&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;hash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;同样的，子窗口也可以改变父窗口的片段标识符。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;nx&quot;&gt;parent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;location&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;target&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;#&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;hash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;location.hash跨域缺点&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;数据直接暴露在了url中，数据容量和类型都有限等&lt;/p&gt;

&lt;h1 id=&quot;window-name-iframe&quot;&gt;window.name + iframe&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;window.name跨域原理：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;浏览器窗口有window.name属性。这个属性的最大特点是，&lt;/p&gt;

&lt;p&gt;在一个窗口(window)的生命周期内,窗口载入的所有的页面（无论是否同源）都是&lt;code&gt;共享一个window.name&lt;/code&gt;的，每个页面对window.name都有读写的权限，&lt;/p&gt;

&lt;p&gt;window.name是持久存在一个窗口载入过的所有页面中的，并不会因新页面的载入而进行重置。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;window.name跨域场景：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;比如有一个 &lt;a href=&quot;http://www.example.com/a.html&quot;&gt;www.example.com/a.html&lt;/a&gt; 页面,需要通过a.html页面里的js来获取另一个位于不同域上的页面 &lt;a href=&quot;http://www.cnblogs.com/data.html&quot;&gt;www.cnblogs.com/data.html&lt;/a&gt; 里的数据。&lt;/p&gt;

&lt;p&gt;（1）data.html页面里的代码很简单，就是给当前的window.name设置一个a.html页面想要得到的数据值。&lt;/p&gt;

&lt;p&gt;data.html里的代码：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'要传送的内容,所有可以转化成字符串来传递的数据都可以在这里使用，比如可以传递一个JSON数据'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/script&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;那么在a.html页面中，我们怎么把data.html页面载入进来呢？显然我们不能直接在a.html页面中通过改变window.location来载入data.html页面，因为我们想要即使a.html页面不跳转也能得到data.html里的数据。答案就是在a.html页面中使用一个隐藏的iframe来充当一个中间人角色，由iframe去获取data.html的数据，然后a.html再去得到iframe获取到的数据。&lt;/p&gt;

&lt;p&gt;充当中间人的iframe想要获取到data.html的通过window.name设置的数据，只需要把这个iframe的src设为 &lt;a href=&quot;http://www.cnblogs.com/data.html&quot;&gt;www.cnblogs.com/data.html&lt;/a&gt; 就行了。然后a.html想要得到iframe所获取到的数据，也就是想要得到iframe的window.name的值，还必须把这个iframe的src设成跟a.html页面同一个域才行，不然根据前面讲的同源策略，a.html是不能访问到iframe里的window.name属性的。&lt;/p&gt;

&lt;p&gt;（2）a.html页面的代码：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;charset=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Insert title here&lt;span class=&quot;nt&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;iframe&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;proxy&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;iframe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onload&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;iframe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;contentWindow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;iframe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;src&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;b.html&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//b.html是随便的一个页面，只要与a.html同源就行，目的是让a.html能访问到iframe里面的东西。&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;iframe&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id =&lt;/span&gt;&lt;span class=&quot;err&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;proxy&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;www.cnblogs.com/data.html&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;style=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;display:none&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;onload=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;getData()&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/iframe&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;window.name 方法的优缺点&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;优点: window.name容量很大，可以放置非常长的字符串（2MB）；&lt;br&gt;&lt;/li&gt;
&lt;li&gt;缺点: 必须监听子窗口window.name属性的变化，影响网页性能。&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;html5-window-postmessage&quot;&gt;HTML5的window.postMessage&lt;/h1&gt;

&lt;p&gt;HTML5引入了一个全新的API：跨文档通信 API（Cross-document messaging）。&lt;/p&gt;

&lt;p&gt;这个API为window对象新增了一个&lt;code&gt;otherWindow.postMessage(message, targetOrigin)&lt;/code&gt;方法，允许跨窗口通信，不论这两个窗口是否同源。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;调用postMessage方法的window对象是指要接收消息的那一个window对象，即otherWindow: 可以是页面中iframe的contentWindow属性；window.open的返回值；通过name或下标从window.frames取到的值。&lt;/p&gt;

&lt;p&gt;该方法的第一个参数message为要发送的消息，类型只能为字符串；&lt;/p&gt;

&lt;p&gt;第二个参数targetOrigin用来限定接收消息的那个window对象所在的域，如果不想限定域，可以使用通配符 *  。&lt;/p&gt;

&lt;p&gt;需要接收消息的window对象，可是通过监听自身的&lt;code&gt;message事件&lt;/code&gt;来获取传过来的消息，消息内容储存在该事件对象的data属性中。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;window.postMessage跨域场景：&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;场景一：&lt;/strong&gt;A窗口 &lt;a href=&quot;http://aaa.com&quot;&gt;http://aaa.com&lt;/a&gt; 向B窗口 &lt;a href=&quot;http://bbb.com&quot;&gt;http://bbb.com&lt;/a&gt; 发消息。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;A页面通过postMessage方法发送消息：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;popup&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'http://bbb.com'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'title'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;popup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;postMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Hello World!'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'http://bbb.com'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Bwindow.postMessage('data', 'http://bbb.com');&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;B页面通过message事件监听并接受消息:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'message'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// data&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// Bwindow&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;origin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// http://aaa.com&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;同理，也可以B页面发送消息，然后A页面监听并接受消息。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;场景二：&lt;/strong&gt;a.com/index.html页面 向 b.com/index.html页面 发消息。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;a.com/index.html中的代码：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;iframe&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ifr&quot;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;b.com/index.html&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/iframe&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onload&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ifr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'ifr'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;win&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ifr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;contentWindow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// 获取window对象&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;targetOrigin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'http://b.com'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// 若写成'http://b.com/c/proxy.html'效果一样&lt;/span&gt;
                                        &lt;span class=&quot;c1&quot;&gt;// 若写成'http://c.com'就不会执行postMessage了&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;win&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;postMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'我是来自a页面的消息'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;targetOrigin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/script&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;b.com/index.html中的代码：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onmessage&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;运行a页面，就能看到b页面收到了消息&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;postMessage优缺点&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;优点：postMessage的使用十分简单，在处理一些和多页面通信、页面与iframe等消息通信的跨域问题时，有着很好的适用性。&lt;/li&gt;
&lt;li&gt;缺点：&lt;a href=&quot;https://caniuse.com/#feat=x-doc-messaging&quot;&gt;IE11才完全支持&lt;/a&gt;、IE10对postMessage的支持有限制&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;通过window.postMessage，读写其他窗口的 LocalStorage 也成为了可能。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/zh-CN/docs/Web/API/Window/postMessage&quot;&gt;https://developer.mozilla.org/zh-CN/docs/Web/API/Window/postMessage&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;jsonp&quot;&gt;JSONP&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;JSONP跨域原理：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;在js中，我们直接用XMLHttpRequest请求不同域上的数据时，是不可以的。但是，在页面上引入不同域上的js脚本文件却是可以的，jsonp正是利用这个特性来实现的。&lt;/p&gt;

&lt;p&gt;JSONP包含两部分：回调函数和数据。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;回调函数是当响应到来时要放在当前页面被调用的函数。&lt;br&gt;&lt;/li&gt;
&lt;li&gt;数据就是传入回调函数中的json数据，也就是回调函数的参数了。&lt;br&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;JSONP跨域步骤&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;（1）网页通过添加一个script元素，向服务器请求JSON数据，这种做法不受同源政策限制；&lt;br&gt;&lt;br&gt;
（2）服务器收到请求后，将数据放在一个指定名字的回调函数里传回来。&lt;br&gt;&lt;br&gt;
（3）回调函数在当前页面被立即调用，前提是浏览器定义了这个回调函数  &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;JSONP跨域场景：&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;有个a.html页面，它里面的代码需要利用ajax获取一个不同域上的json数据，假设这个json数据地址是 &lt;a href=&quot;http://example.com/data.php&quot;&gt;http://example.com/data.php&lt;/a&gt;,&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;a.html&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;dosomething&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;jsondata&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/script&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;http://example.com/data.php?callback=dosomething&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/script&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;script标签向服务器example.com发出请求。注意，该请求的查询字符串有一个callback参数，用来指定回调函数的名字，这对于JSONP是必需的。&lt;/p&gt;

&lt;p&gt;因为是当做一个js文件来引入的，所以 &lt;a href=&quot;http://example.com/data.php&quot;&gt;http://example.com/data.php&lt;/a&gt; 返回的必须是一个能执行的js文件，所以这个页面的php代码可能是这样的:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$callback&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$_GET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'callback'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// 得到回调函数名
&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'a'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'b'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'c'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// 要返回的数据
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$callback&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'('&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;json_encode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;')'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// 输出
&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;?&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;最终那个页面输出的结果是:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;nx&quot;&gt;dosomething&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'a'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'b'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'c'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;所以通过 &lt;a href=&quot;http://example.com/data.php?callback=dosomething&quot;&gt;http://example.com/data.php?callback=dosomething&lt;/a&gt; 得到的js文件，就是我们之前定义的dosomething函数,并且它的参数就是我们需要的json数据，这样我们就跨域获得了我们需要的数据。&lt;/p&gt;

&lt;p&gt;a.html&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;dosomething&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;jsondata&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- &amp;lt;script src=&quot;http://example.com/data.php?callback=dosomething&quot;&amp;gt;&amp;lt;/script&amp;gt; --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;dosomething&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'a'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'b'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'c'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;由于script元素请求的脚本，直接作为代码运行。这时，只要浏览器定义了dosomething函数，该函数就会立即调用。作为参数的JSON数据被视为JavaScript对象，而不是字符串，因此避免了使用JSON.parse的步骤。&lt;/p&gt;

&lt;h2 id=&quot;jquery-jsonp&quot;&gt;jQuery实现JSONP&lt;/h2&gt;

&lt;p&gt;1) $.getJSON方法来请求跨域数据：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;c1&quot;&gt;//callback后面的?会由jQuery自动生成方法名&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getJSON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'http://www.b.com/getdata?callback=?'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 处理获得的json数据&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;2) $.ajax方法，指定dataType为jsonp：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ajax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'http://www.b.com/getdata?callback=?'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//不指定回调名，可省略callback参数，会由jQuery自动生成&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;dataType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'jsonp'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;jsonpCallback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'demo'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//可省略&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;success&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;JSONP跨域优缺点&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;优点：JSONP是服务器与客户端跨源通信的常用方法。最大特点就是简单适用，老式浏览器全部支持。&lt;br&gt;&lt;/li&gt;
&lt;li&gt;缺点：&lt;br&gt;&lt;/li&gt;
&lt;li&gt;1、JSONP只支持GET请求;&lt;br&gt;&lt;/li&gt;
&lt;li&gt;2、JSONP只支持跨域HTTP请求这种情况,不能解决不同域的两个页面之间如何进行JavaScript调用的问题;&lt;br&gt;&lt;/li&gt;
&lt;li&gt;3、要确定jsonp请求是否失败并不容易,回调函数调用失败，浏览器会以静默失败的方式处理&lt;br&gt;&lt;/li&gt;
&lt;li&gt;4、安全问题(请求代码中可能存在安全隐患)&lt;br&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;websocket&quot;&gt;WebSocket通信协议&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;webSocket跨域原理：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;WebSocket是一种通信协议，使用ws://（非加密）和wss://（加密）作为协议前缀。该协议&lt;code&gt;不实行同源政策&lt;/code&gt;，只要服务器支持，就可以通过它进行跨源通信。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;webSocket跨域实现步骤：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;在JS创建了webSocket之后，会有一个HTTP请求发送到浏览器以发起连接。取得服务器响应后，建立的连接会使用HTTP升级从HTTP协议交换为webSockt协议。&lt;/p&gt;

&lt;p&gt;浏览器发出的WebSocket请求的头信息&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;GET /chat HTTP/1.1
Host: server.example.com
Upgrade: websocket
Connection: Upgrade
Sec-WebSocket-Key: x3JJHMbDL1EzLkh9GBhXDw==
Sec-WebSocket-Protocol: chat, superchat
Sec-WebSocket-Version: 13
Origin: http://example.com
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上面代码中，有一个字段是Origin，表示该请求的&lt;code&gt;请求源（origin）&lt;/code&gt;，即发自哪个域名。&lt;/p&gt;

&lt;p&gt;正是因为有了Origin这个字段，所以WebSocket才没有实行同源政策。因为服务器可以根据这个字段，判断是否许可本次通信。如果该域名在&lt;code&gt;白名单&lt;/code&gt;内，服务器就会做出如下回应。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;HTTP/1.1 101 Switching Protocols
Upgrade: websocket
Connection: Upgrade
Sec-WebSocket-Accept: HSmrc0sMlYUkAGmm5OPpG2HaGWk=
Sec-WebSocket-Protocol: chat
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;WebSocket客户端示例&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ws&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;WebSocket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;wss://echo.websocket.org&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;ws&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onopen&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;evt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; 
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Connection open ...&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; 
  &lt;span class=&quot;nx&quot;&gt;ws&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Hello WebSockets!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;ws&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onmessage&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;evt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Received Message: &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;evt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;ws&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;ws&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onclose&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;evt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Connection closed.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href=&quot;http://www.ruanyifeng.com/blog/2017/05/websocket.html&quot;&gt;http://www.ruanyifeng.com/blog/2017/05/websocket.html&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;w3c-cors&quot;&gt;W3C的CORS跨域资源共享&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;CORS原理&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&amp;quot;跨域资源共享&amp;quot;（Cross-origin resource sharing）。它是W3C标准，是跨源AJAX请求的根本解决方法。&lt;/p&gt;

&lt;p&gt;CORS使用了一个新的&lt;code&gt;Origin请求头&lt;/code&gt;和一个新的&lt;code&gt;Access-Control-Allow-Origin响应头&lt;/code&gt;扩展了HTTP。&lt;/p&gt;

&lt;p&gt;整个CORS通信过程，都是浏览器自动完成，不需要用户参与。对于开发者来说，CORS通信与同源的AJAX通信没有差别，代码完全一样。浏览器一旦发现AJAX请求跨源，就会自动添加一些附加的头信息，有时还会多出一次附加的请求，但用户不会有感觉。&lt;/p&gt;

&lt;p&gt;因此，实现CORS通信的关键是服务器。只要&lt;code&gt;服务器实现了CORS接口&lt;/code&gt;，就可以跨源通信。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;浏览器将CORS请求分成两类：简单请求（simple request）和非简单请求（not-so-simple request）。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;CORS简单请求的基本流程&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;浏览器发现这次跨源AJAX请求是简单请求，就自动在头信息之中，添加一个Origin字段。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;nx&quot;&gt;GET&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cors&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;HTTP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;1.1&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;Origin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//api.bob.com&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;Host&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;api&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;alice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;com&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;Accept&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Language&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;en&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;US&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;Connection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;keep&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;alive&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Agent&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Mozilla&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;5.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Origin字段用来说明，本次请求来自哪个源（协议 + 域名 + 端口）。服务器根据这个值，决定是否同意这次请求。&lt;/p&gt;

&lt;p&gt;服务器端对于CORS的支持，通过设置Access-Control-Allow-Origin头标识哪些站点可以请求文件。如果浏览器检测到相应的设置，就可以允许Ajax进行跨域的访问。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;nx&quot;&gt;Access&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Control&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Allow&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Origin&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//api.bob.com&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;Access&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Control&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Allow&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Credentials&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;Access&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Control&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Expose&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Headers&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;FooBar&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;Content&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Type&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;charset&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;utf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;CORS具体例子&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;平时的ajax请求:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;xhr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;XMLHttpRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;xhr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;POST&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;/damonare&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;xhr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;使用CORS的Ajax代码：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;xhr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;XMLHttpRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;xhr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;￼GET&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;http://segmentfault.com/u/trigkit4/&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;xhr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;代码与之前的区别就在于相对路径换成了其他域的绝对路径，也就是你要跨域访问的接口地址。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;CORS跨域优缺点&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;优点：CORS支持所有类型的HTTP请求,CORS与JSONP相比，无疑更为先进、方便和可靠。&lt;br&gt;&lt;/li&gt;
&lt;li&gt;缺点：CORS需要浏览器和服务器同时支持。IE浏览器不能低于IE10。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;http://www.ruanyifeng.com/blog/2016/04/cors.html&quot;&gt;http://www.ruanyifeng.com/blog/2016/04/cors.html&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;all&quot;&gt;总结-all&lt;/h1&gt;

&lt;p&gt;在不同域的文档之间传输数据,前端的方式:&lt;/p&gt;

&lt;p&gt;对于主域相同，子域不同的父子窗口通信&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;document.domain + iframe, ①获取document.cookie; ②获取子iframe.contentWindow&lt;br&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;对于完全不同源的网站，有三种方法可以解决跨域窗口的通信问题。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;location.hash + iframe，子窗口监听hashchange事件得到消息&lt;br&gt;&lt;/li&gt;
&lt;li&gt;window.name + iframe, 同窗口的页面共享window.name，父窗口监听子窗口window.name属性的变化得到消息&lt;br&gt;&lt;/li&gt;
&lt;li&gt;otherWindow.postMessage(message, targetOrigin) + iframe，子iframe监听message事件来获取父页面传过来的消息&lt;br&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;hr&gt;&lt;/p&gt;

&lt;p&gt;规避AJAX同源限制:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;JSONP - 前后端结合：script.src发请求，callbackFn(data)&lt;br&gt;&lt;/li&gt;
&lt;li&gt;WebSocket - 协议不实行同源政策，Origin请求头，服务器白名单&lt;br&gt;&lt;/li&gt;
&lt;li&gt;CORS跨域资源共享  - 纯后端方式: 浏览器自动添加Origin，服务器设置Access-Control-Allow-Origin白名单&lt;br&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;more&quot;&gt;更多-more&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Same-origin_policy&quot;&gt;https://en.wikipedia.org/wiki/Same-origin_policy&lt;/a&gt;&lt;br&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.ruanyifeng.com/blog/2016/04/same-origin-policy.html&quot;&gt;浏览器同源政策及其规避方法-阮一峰&lt;/a&gt;&lt;br&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/zh-CN/docs/Web/Security/Same-origin_policy&quot;&gt;https://developer.mozilla.org/zh-CN/docs/Web/Security/Same-origin_policy&lt;/a&gt;&lt;br&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.jianshu.com/p/beb059c43a8b&quot;&gt;https://en.wikipedia.org/wiki/Same-origin_policy 翻译&lt;/a&gt;&lt;br&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://m.blog.csdn.net/joyhen/article/details/21631833&quot;&gt;前端解决跨域问题的8种方案（最新最全）&lt;/a&gt;&lt;br&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.cnblogs.com/2050/p/3191744.html&quot;&gt;前端的跨域请求方法使用场景及各自的局限性&lt;/a&gt;&lt;br&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/NOmsbKZsryTUONQj2gBFIA&quot;&gt;前端跨域知识总结-前端大全-秦至&lt;/a&gt;&lt;br&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/Ulh3dq-9eHwbS2ggOcu7jA&quot;&gt;JavaScript 跨域总结与解决办法-前端大全-rainman&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/G37_ZBIj_WkSpCyTuTpg3g&quot;&gt;那些年，那些跨域问题-前端早读课-金蝶&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
                <link>/http/2017/11/07/http-Communication</link>
                <guid>/http/2017/11/07/http-Communication</guid>
                <pubDate>Tue, 07 Nov 2017 00:00:00 +0800</pubDate>
        </item>

        <item>
                <title>js运行机制、同步、异步</title>
                <description>&lt;h1 id=&quot;js&quot;&gt;js运行机制是单线程&lt;/h1&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;setTimeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;300&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;结果：&lt;br&gt;&lt;br&gt;
100&lt;br&gt;&lt;br&gt;
300&lt;br&gt;&lt;br&gt;
200  &lt;/p&gt;

&lt;p&gt;&lt;em&gt;以上程序执行过程分析：&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;执行第一行，打印100&lt;br&gt;&lt;/li&gt;
&lt;li&gt;执行setTimeout后，传入setTimeout的函数会被暂存起来，不会立即执行（单线程的特点，不能同时干两件事）&lt;br&gt;&lt;/li&gt;
&lt;li&gt;执行最后一行，打印300&lt;br&gt;&lt;/li&gt;
&lt;li&gt;待所有程序执行完，处于空闲状态时，会立马看有没有暂存起来的要执行。&lt;br&gt;&lt;/li&gt;
&lt;li&gt;发现暂存起来的setTimeout中的函数无需等待时间，就立即过来执行&lt;br&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;task-queue&quot;&gt;任务队列-Task queue&lt;/h1&gt;

&lt;p&gt;所有任务可以分成两种，一种是同步任务（synchronous），另一种是异步任务（asynchronous）。&lt;br&gt;&lt;br&gt;
同步任务指的是，在主线程上排队执行的任务，只有前一个任务执行完毕，才能执行后一个任务；&lt;br&gt;&lt;br&gt;
异步任务指的是，不进入主线程、而进入&amp;quot;任务队列&amp;quot;（task queue）的任务，只有&amp;quot;任务队列&amp;quot;通知主线程，某个异步任务可以执行了，该任务才会进入主线程执行。  &lt;/p&gt;

&lt;p&gt;异步执行的运行机制如下。（同步执行也是如此，因为它可以被视为没有异步任务的异步执行。）&lt;/p&gt;

&lt;p&gt;（1）所有同步任务都在主线程上执行，形成一个执行栈（execution context stack）。&lt;br&gt;&lt;br&gt;
（2）主线程之外，还存在一个&amp;quot;任务队列&amp;quot;（task queue）。只要异步任务有了运行结果，就在&amp;quot;任务队列&amp;quot;之中放置一个事件。&lt;br&gt;&lt;br&gt;
（3）一旦&amp;quot;执行栈&amp;quot;中的所有同步任务执行完毕，系统就会读取&amp;quot;任务队列&amp;quot;，看看里面有哪些事件。那些对应的异步任务，于是结束等待状态，进入执行栈，开始执行。&lt;br&gt;&lt;br&gt;
（4）主线程不断重复上面的第三步。  &lt;/p&gt;

&lt;div class=&quot;rd&quot;&gt;
    &lt;img src=&quot;/assets/images/2017/10-11-12/11-06-1.jpg&quot; alt=&quot;&quot;&gt;
&lt;/div&gt;

&lt;p&gt;只要主线程空了，就会去读取&amp;quot;任务队列&amp;quot;，这就是JavaScript的运行机制。这个过程会不断重复。&lt;/p&gt;

&lt;h1 id=&quot;synchronization-task&quot;&gt;同步任务-Synchronization task&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;console.log()&lt;br&gt;&lt;br&gt;
alert()&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'peng'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'you'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'yi'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id=&quot;asynchronous-task&quot;&gt;异步任务-Asynchronous task&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;前端使用异步的场景&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;定时任务：setTimeout、setInterval&lt;br&gt;&lt;br&gt;
网络请求：ajax请求，动态&lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt;加载&lt;br&gt;&lt;br&gt;
DOM事件绑定&lt;br&gt;&lt;br&gt;
ES6中Promise  &lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;settimeout&quot;&gt;setTimeout&lt;/h2&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;setTimeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;300&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;结果：&lt;br&gt;&lt;br&gt;
100&lt;br&gt;&lt;br&gt;
300&lt;br&gt;&lt;br&gt;
200  &lt;/p&gt;

&lt;h2 id=&quot;ajax&quot;&gt;ajax请求代码示例&lt;/h2&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'start'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'./data1.json'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)){&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'end'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;img&quot;&gt;img加载&lt;/h2&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'start'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;img&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'img'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;img&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onload&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'loaded'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;img&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;src&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'/xxx.png'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'end'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;dom&quot;&gt;DOM事件绑定&lt;/h2&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'start'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'btn1'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'click'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'clicked'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'end'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;何时需要异步&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;在可能发生等待的情况&lt;br&gt;&lt;/li&gt;
&lt;li&gt;等待过程中不能像alert一样阻塞程序运行&lt;br&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;difference&quot;&gt;同步和异步的区别-Difference&lt;/h1&gt;

&lt;p&gt;同步会阻塞代码执行，而异步不会&lt;/p&gt;

&lt;h1 id=&quot;event-loop&quot;&gt;Event Loop&lt;/h1&gt;

&lt;div class=&quot;rd&quot;&gt;
    &lt;img src=&quot;/assets/images/2017/10-11-12/11-06-2.png&quot; alt=&quot;&quot;&gt;
&lt;/div&gt;

&lt;h1 id=&quot;order&quot;&gt;同步和异步执行顺序-order&lt;/h1&gt;

&lt;p&gt;&lt;code&gt;执行栈中的代码（同步任务），总是在读取&amp;quot;任务队列&amp;quot;（异步任务）之前执行。&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;A&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;B&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;结果只执行A&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;A&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;setTimeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'B'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;结果还是只执行A&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;setTimeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
     &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;1s后打出4个4&lt;/p&gt;

&lt;h1 id=&quot;more&quot;&gt;更多-more&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.ruanyifeng.com/blog/2014/10/event-loop.html&quot;&gt;http://www.ruanyifeng.com/blog/2014/10/event-loop.html&lt;/a&gt;&lt;br&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://web.jobbole.com/82631/&quot;&gt;http://web.jobbole.com/82631/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
                <link>/js/2017/11/06/js-operating</link>
                <guid>/js/2017/11/06/js-operating</guid>
                <pubDate>Mon, 06 Nov 2017 00:00:00 +0800</pubDate>
        </item>

        <item>
                <title>前端错误监控</title>
                <description>&lt;h1 id=&quot;error&quot;&gt;前端error的分类&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;即时运行错误：代码错误&lt;br&gt;&lt;/li&gt;
&lt;li&gt;资源加载错误&lt;br&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;error&quot;&gt;error的捕获方式&lt;/h1&gt;

&lt;h2 id=&quot;error&quot;&gt;即时运行error&lt;/h2&gt;

&lt;p&gt;1、try..catch&lt;br&gt;&lt;br&gt;
2、window.onerror&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;//在这里运行代码&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;//在这里处理错误&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;error&quot;&gt;资源加载error&lt;/h2&gt;

&lt;p&gt;1、object.onerror&lt;br&gt;&lt;br&gt;
2、&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Performance/getEntries&quot;&gt;performance.getEntries()&lt;/a&gt;, 获取页面中每个静态资源的请求&lt;br&gt;&lt;br&gt;
3、Error事件捕获  &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'error'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'捕获'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;资源加载错误能被事件捕获，但是资源加载错误不冒泡&lt;/strong&gt;&lt;/p&gt;

&lt;h1 id=&quot;js&quot;&gt;跨域的js运行错误&lt;/h1&gt;

&lt;p&gt;错误能被捕获。&lt;/p&gt;

&lt;p&gt;1、在script标签增加 crossorigin 属性&lt;br&gt;&lt;br&gt;
2、设置js资源响应头 Access-Control-Allow-Origin:*  &lt;/p&gt;

&lt;h1 id=&quot;error&quot;&gt;上报error的基本原理&lt;/h1&gt;

&lt;p&gt;1、采用Ajax通信的方式上报&lt;br&gt;&lt;br&gt;
2、利用Image对象上报（推荐）  &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;src&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;http://baidu.com/test?r=hello&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/script&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id=&quot;more&quot;&gt;更多-more&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.cnblogs.com/hustskyking/p/fe-monitor.html&quot;&gt;http://www.cnblogs.com/hustskyking/p/fe-monitor.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
                <link>/other/2017/11/05/interview-front-end-error</link>
                <guid>/other/2017/11/05/interview-front-end-error</guid>
                <pubDate>Sun, 05 Nov 2017 00:00:00 +0800</pubDate>
        </item>

        <item>
                <title>浏览器渲染机制</title>
                <description>&lt;h1 id=&quot;high-rise-structure&quot;&gt;浏览器的High-rise structure&lt;/h1&gt;

&lt;p&gt;浏览器的高层结构:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;用户界面&lt;/strong&gt; - 包括地址栏、前进/后退按钮、书签菜单等。除了浏览器主窗口显示的您请求的页面外，其他显示的各个部分都属于用户界面。&lt;br&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;浏览器引擎&lt;/strong&gt; - 在用户界面和呈现引擎之间传送指令。&lt;br&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;呈现引擎&lt;/strong&gt; - 负责显示请求的内容。如果请求的内容是 HTML，它就负责解析 HTML 和 CSS 内容，并将解析后的内容显示在屏幕上。&lt;br&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;网络&lt;/strong&gt; - 用于网络调用，比如 HTTP 请求。其接口与平台无关，并为所有平台提供底层实现。&lt;br&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;用户界面后端&lt;/strong&gt; - 用于绘制基本的窗口小部件，比如组合框和窗口。其公开了与平台无关的通用接口，而在底层使用操作系统的用户界面方法。&lt;br&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;JavaScript 解释器&lt;/strong&gt;。用于解析和执行 JavaScript 代码。&lt;br&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;数据存储&lt;/strong&gt;。这是持久层。浏览器需要在硬盘上保存各种数据，例如 Cookie。新的 HTML 规范 (HTML5) 定义了“网络数据库”，这是一个完整（但是轻便）的浏览器内数据库。&lt;br&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;rd&quot;&gt;
    &lt;img src=&quot;/assets/images/2017/10-11-12/11-04-1.png&quot; alt=&quot;&quot;&gt;
&lt;/div&gt;

&lt;p&gt;渲染引擎(layout engineer或Rendering Engine)&lt;/p&gt;

&lt;h1 id=&quot;rendering-engine&quot;&gt;呈现引擎-Rendering Engine&lt;/h1&gt;

&lt;h2 id=&quot;role&quot;&gt;呈现引擎的作用-role&lt;/h2&gt;

&lt;p&gt;默认情况下，呈现引擎可显示 HTML 和 XML 文档与图片。通过插件（或浏览器扩展程序），还可以显示其他类型的内容；例如，使用 PDF 查看器插件就能显示 PDF 文档。但是在本章中，我们将集中介绍其主要用途：显示使用 CSS 格式化的 HTML 内容和图片。&lt;/p&gt;

&lt;h2 id=&quot;classification&quot;&gt;呈现引擎分类-classification&lt;/h2&gt;

&lt;p&gt;本文所讨论的浏览器（Firefox、Chrome 浏览器和 Safari）是基于两种呈现引擎构建的。&lt;br&gt;&lt;br&gt;
Firefox 使用的是 &lt;code&gt;Gecko&lt;/code&gt;，这是 Mozilla 公司“自制”的呈现引擎。&lt;br&gt;&lt;br&gt;
而 Safari 和 Chrome 浏览器使用的都是 &lt;code&gt;WebKit&lt;/code&gt;。  &lt;/p&gt;

&lt;p&gt;其他浏览器内核：&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Presto&lt;/code&gt;内核：Opera7及以上。 [Opera内核原为：Presto，现为：Blink;]&lt;br&gt;&lt;br&gt;
&lt;code&gt;Trident&lt;/code&gt;内核：IE,MaxThon,TT,The World,360,搜狗浏览器等。[又称MSHTML]  &lt;/p&gt;

&lt;h1 id=&quot;main-process&quot;&gt;呈现引擎的主流程-main process&lt;/h1&gt;

&lt;p&gt;解析html以构建dom树 -&amp;gt; 构建render树 -&amp;gt; 布局render树 -&amp;gt; 绘制render树&lt;/p&gt;

&lt;div class=&quot;rd&quot;&gt;
    &lt;img src=&quot;/assets/images/2017/10-11-12/11-04-2.png&quot; alt=&quot;&quot;&gt;
&lt;/div&gt;

&lt;h2 id=&quot;dom-render&quot;&gt;dom树和render树&lt;/h2&gt;

&lt;div class=&quot;rd&quot;&gt;
    &lt;img src=&quot;/assets/images/2017/10-11-12/11-04-5.png&quot; alt=&quot;&quot;&gt;
&lt;/div&gt;

&lt;p&gt;Rendering Tree 渲染树并不等同于 DOM 树，因为一些像&amp;quot;head&amp;quot;元素或display:none的东西就没必要放在渲染树中了。&lt;/p&gt;

&lt;p&gt;display:none 的节点不会被加入 Render Tree，而 visibility: hidden 则会，所以，如果某个节点最开始是不显示的，设为 display:none 是更优的。&lt;/p&gt;

&lt;h1 id=&quot;webkit&quot;&gt;WebKit 主流程&lt;/h1&gt;

&lt;div class=&quot;rd&quot;&gt;
    &lt;img src=&quot;/assets/images/2017/10-11-12/11-04-3.png&quot; alt=&quot;&quot;&gt;
&lt;/div&gt;

&lt;p&gt;Mozilla 的 Gecko 呈现引擎主流程&lt;/p&gt;

&lt;div class=&quot;rd&quot;&gt;
    &lt;img src=&quot;/assets/images/2017/10-11-12/11-04-4.jpg&quot; alt=&quot;&quot;&gt;
&lt;/div&gt;

&lt;p&gt;WebKit 和 Gecko 使用的术语略有不同，但整体流程是基本相同的。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Create/Update DOM And request css/image/js&lt;/strong&gt;：浏览器请求到HTML代码后，在生成DOM的最开始阶段，并行发起css、图片、js的请求，无论他们是否在HEAD里。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Create/Update Render CSSOM&lt;/strong&gt;：CSS文件下载完成，开始构建CSSOM&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Create/Update Render Tree&lt;/strong&gt;：所有CSS文件下载完成，CSSOM构建结束后，和 DOM 一起生成 Render Tree。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Layout&lt;/strong&gt;：有了Render Tree，浏览器已经能知道网页中有哪些节点、各个节点的CSS定义以及他们的从属关系。下一步操作称之为Layout，顾名思义就是计算出每个节点在屏幕中的位置。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Painting&lt;/strong&gt;：Layout后，浏览器已经知道了哪些节点要显示（which nodes are visible）、每个节点的CSS属性是什么（their computed styles）、每个节点在屏幕中的位置是哪里（geometry）。就进入了最后一步：Painting，按照算出来的规则，通过显卡，把内容画到屏幕上。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;需要着重指出的是，这是一个渐进的过程。为达到更好的用户体验，呈现引擎会力求尽快将内容显示在屏幕上。它不必等到整个 HTML 文档解析完毕之后，就会开始构建呈现树和设置布局。在不断接收和处理来自网络的其余内容的同时，呈现引擎会将部分内容解析并显示出来。&lt;/p&gt;

&lt;h1 id=&quot;doctype&quot;&gt;什么是DOCTYPE及作用&lt;/h1&gt;

&lt;p&gt;DTD（document type definition,文档类型定义）是一系列的语法规则，用来定义XML或 (X)HTML的文件类型。浏览器会使用它来判断文档类型，决定使用何种协议来解析，以及切换浏览器模式。&lt;/p&gt;

&lt;p&gt;DOCTYPE是用来声明文档类型和DTD规范的，一个主要的用途便是文件的合法性验证。如果文件代码不合法，那么浏览器解析时便会出一些差错。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;HTML5
&lt;code&gt;html
&amp;lt;!DOCTYPE html&amp;gt;
&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;HTML 4.01 Strict&lt;br&gt;
该DTD包含所有HTML元素和属性，但不包括展示性的和弃用的元素（比如font）&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;HTML 4.01 Transitional&lt;br&gt;
该DTD包含所有HTML元素和属性，包括展示性的和弃用的元素（比如font）&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;load&quot;&gt;加载-Load&lt;/h1&gt;

&lt;p&gt;了解浏览器如何进行加载，我们可以在引用外部样式文件，外部js时，将他们放到合适的位置，使浏览器以最快的速度将文件加载完毕。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;加载css和js文件的区别&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;加载过程中遇到外部css文件，浏览器另外发出一个请求，来获取css文件。遇到图片资源，浏览器也会另外发出一个请求，来获取图片资源。这是异步请求，并不会影响html文档进行加载，&lt;br&gt;&lt;/li&gt;
&lt;li&gt;但是当文档加载过程中遇到js文件，html文档会挂起渲染（加载解析渲染同步）的线程，不仅要等待文档中js文件加载完毕，还要等待解析执行完毕，才可以恢复html文档的渲染线程。&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;原因：JS有可能会修改DOM，最为经典的document.write，这意味着，在JS执行完成前，后续所有资源的下载可能是没有必要的，这是js阻塞后续资源下载的根本原因。&lt;/p&gt;

&lt;p&gt;办法：可以将外部引用的js文件放在&lt;/body&gt;前。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;css文件影响js文件的执行&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;虽然css文件的加载不影响js文件的加载，但是却影响js文件的执行，即使js文件内只有一行代码，也会造成阻塞。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;原因：可能会有 var width = $(&amp;#39;#id&amp;#39;).width()，这意味着，js代码执行前，浏览器必须保证css文件已下载和解析完成。这也是css阻塞后续js的根本原因。&lt;/p&gt;

&lt;p&gt;办法：当js文件不需要依赖css文件时，可以将js文件放在头部css的前面。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;asynchronous-loading&quot;&gt;异步加载-Asynchronous loading&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;1. 异步加载方式&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;动态脚本加载&lt;/li&gt;
&lt;li&gt;defer&lt;/li&gt;
&lt;li&gt;async&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;2. 异步加载的区别&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;defer是在HTML解析完之后才会执行，如果是多个，按照加载的顺序依次执行&lt;br&gt;&lt;/li&gt;
&lt;li&gt;async是在加载完之后立即执行，如果是多个，执行顺序和加载顺序无关&lt;br&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;lang=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;en&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;charset=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;test&lt;span class=&quot;nt&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- &amp;lt;script src=&quot;js/defer1.js&quot; defer&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script src=&quot;js/defer2.js&quot; defer&amp;gt;&amp;lt;/script&amp;gt; --&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://cdnjs.cloudflare.com/ajax/libs/seajs/3.0.2/sea.js&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;async&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;js/defer2.js&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;async&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;dome&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        test
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;  
            &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'write'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'&amp;lt;span&amp;gt;write&amp;lt;/span&amp;gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;  
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;200000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;20000&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;===&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;defer1.js&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'defer1'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;defer2.js&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'defer2'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id=&quot;more&quot;&gt;更多-more&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.html5rocks.com/zh/tutorials/internals/howbrowserswork/&quot;&gt;浏览器的工作原理：新式网络浏览器幕后揭秘&lt;/a&gt;&lt;br&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://segmentfault.com/a/1190000004292479#articleHeader6&quot;&gt;JS 一定要放在 Body 的最底部么&lt;/a&gt;&lt;br&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.cnblogs.com/slly/p/6640761.html&quot;&gt;浏览器渲染原理及流程&lt;/a&gt;&lt;br&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.jianshu.com/p/e141d1543143&quot;&gt;浏览器~加载，解析，渲染&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
                <link>/other/2017/11/04/interview-browser-working</link>
                <guid>/other/2017/11/04/interview-browser-working</guid>
                <pubDate>Sat, 04 Nov 2017 00:00:00 +0800</pubDate>
        </item>

        <item>
                <title>HTTP/2.0、HTTP/1.1和HTTP/1.0的区别</title>
                <description>&lt;h1 id=&quot;http-2-0-http-1-1&quot;&gt;HTTP/2.0与HTTP/1.1区别&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;采用二进制格式（Binary Format）解析&lt;br&gt;&lt;/li&gt;
&lt;li&gt;多路复用（MultiPlexing）&lt;br&gt;&lt;/li&gt;
&lt;li&gt;header压缩&lt;br&gt;&lt;/li&gt;
&lt;li&gt;服务端推送（server push）&lt;br&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href=&quot;https://http2.github.io/&quot;&gt;https://http2.github.io/&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;binary-format&quot;&gt;新的二进制格式（Binary Format）&lt;/h2&gt;

&lt;p&gt;HTTP1.x的解析是基于文本，HTTP2.0的协议解析采用二进制格式。&lt;/p&gt;

&lt;p&gt;二进制协议解析起来更高效、“线上”更紧凑，更重要的是错误更少。&lt;/p&gt;

&lt;h2 id=&quot;multiplexing&quot;&gt;多路复用（MultiPlexing）&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;HTTP2.0的多路复用和HTTP1.X中的长连接复用有什么区别&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;HTTP/1.* 一次请求-响应，建立一个连接，用完关闭；每一个请求都要建立一个连接。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;HTTP/1.1 试过用流水线(pipelining)来解决这个问题, 若干个请求排队串行化单线程处理，后面的请求等待前面请求的返回才能获得执行机会，一旦有某请求超时等，后续请求只能被&lt;code&gt;阻塞&lt;/code&gt;。此外, 由于网络媒介(intermediary )和服务器不能很好的支持流水线, 导致部署起来困难重重。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;HTTP/2多个消息的请求和响应可同时在一个连接上&lt;code&gt;并行执行&lt;/code&gt;。某个请求任务耗时严重，不会影响到其它连接的正常执行。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;rd&quot;&gt;
    &lt;img src=&quot;/assets/images/2017/10-11-12/11-01-9.png&quot; alt=&quot;&quot;&gt;
&lt;/div&gt;

&lt;h2 id=&quot;header&quot;&gt;header压缩&lt;/h2&gt;

&lt;p&gt;HTTP/2 对消息头采用 HPACK 进行压缩传输，通讯双方各自cache一份header fields表，既避免了重复header的传输，又减小了需要传输的大小。&lt;/p&gt;

&lt;h2 id=&quot;server-push&quot;&gt;服务端推送（server push）&lt;/h2&gt;

&lt;p&gt;当浏览器请求一个网页时，服务器将会发回HTML，在服务器开始发送JavaScript、图片和CSS前，服务器需要等待浏览器解析HTML和发送所有内嵌资源的请求。服务器推送服务通过“推送”那些它认为客户端将会需要的内容到客户端的缓存中，以此来避免往返的延迟。&lt;/p&gt;

&lt;div class=&quot;rd&quot;&gt;
    &lt;img src=&quot;/assets/images/2017/10-11-12/11-01-7.png&quot; alt=&quot;&quot;&gt;
&lt;/div&gt;

&lt;div class=&quot;rd&quot;&gt;
    &lt;img src=&quot;/assets/images/2017/10-11-12/11-01-8.png&quot; alt=&quot;&quot;&gt;
&lt;/div&gt;

&lt;h1 id=&quot;http&quot;&gt;HTTP历史&lt;/h1&gt;

&lt;div class=&quot;rd&quot;&gt;
    &lt;img src=&quot;/assets/images/2017/10-11-12/11-01-6.png&quot; alt=&quot;&quot;&gt;
&lt;/div&gt;

&lt;h1 id=&quot;http&quot;&gt;HTTP瓶颈&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;一条连接上只可发送一个请求。&lt;br&gt;&lt;/li&gt;
&lt;li&gt;请求只能从客户端开始。客户端不可以接收除响应以外的指令。&lt;br&gt;&lt;/li&gt;
&lt;li&gt;请求/响应首部未经压缩就发送。首部信息越多延迟越大。&lt;br&gt;&lt;/li&gt;
&lt;li&gt;发送冗长的首部。每次互相发送相同的首部造成的浪费较多。&lt;br&gt;&lt;/li&gt;
&lt;li&gt;可任意选择数据压缩格式。非强制压缩发送。&lt;br&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;影响一个HTTP网络请求的因素主要有两个：带宽和延迟。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ajax的解决方法&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;从已加载完毕的页面发起请求，只更新局部页面。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Comet的解决方法&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;一旦服务器有内容更新了，不等待请求，直接给客户端返回响应。模拟服务器向客户端推送的功能。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;SPDY的目标&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Google在2010发布了SPDY，其开发目标旨在解决HTTP的性能瓶颈，缩短Web页面的加载时间（50%）。&lt;/p&gt;

&lt;h1 id=&quot;spdy-http1-x&quot;&gt;SPDY：HTTP1.x的优化&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;http://www.chromium.org/spdy/&quot;&gt;http://www.chromium.org/spdy/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;SPDY没有完全改写HTTP协议，而是在TCP/IP的应用层与传输层之间通过新加会话的形式运作。同时，考虑到安全性问题，SPDY规定通信中使用SSL。&lt;/p&gt;

&lt;div class=&quot;rd&quot;&gt;
    &lt;img src=&quot;/assets/images/2017/10-11-12/11-01-1.png&quot; alt=&quot;&quot;&gt;
&lt;/div&gt;

&lt;h2 id=&quot;spdy&quot;&gt;SPDY特点&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;1.多路复用流&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;通过单一的TCP连接，可以无限制处理多个HTTP请求。所有请求的处理都在一条TCP连接上完成，因此TCP的处理效率得到提高。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2.赋予请求优先级&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;SPDY不仅可以无限制地并发处理请求，还可以给请求逐个分配优先级顺序。这样主要是为了在发送多个请求时，解决因带宽低而导致响应变慢的问题。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3.压缩HTTP首部&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;压缩HTTP请求和响应的首部，通信产生的数据包数量和发送的字节数就变少了。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4.推送功能&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;支持服务器主动向客户端推送数据的功能。这样，服务器可直接发送数据，而不必等待客户端的请求。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5.服务器提示功能&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;服务器可以主动提示客户端请求所需的资源。由于在客户端发现资源之前就可以获知资源的存在，因此在资源已缓存等情况下，可以避免发送不必要的请求。&lt;/p&gt;

&lt;h2 id=&quot;spdy-web&quot;&gt;SPDY消除web瓶颈了吗&lt;/h2&gt;

&lt;p&gt;SPDY只是将单个域名（IP地址）的通信多路复用，当一个网站上使用多个域名下的资源，改善效果受限。&lt;/p&gt;

&lt;p&gt;SPDY的确是一种可有效消除HTTP瓶颈的技术。&lt;/p&gt;

&lt;p&gt;还有非HTTP瓶颈导致的速度提升问题，比如改善web内容的编写方式等。&lt;/p&gt;

&lt;h1 id=&quot;websccket&quot;&gt;使用浏览器进行全双工通信的WebSccket&lt;/h1&gt;

&lt;p&gt;WebSocket通信协议在2011年被定为标准。&lt;/p&gt;

&lt;p&gt;web浏览器与web服务器之间全双工通信标准。主要为了解决Ajax和Comet里XMLHttpRequest附带的缺陷所引起的问题。&lt;/p&gt;

&lt;h2 id=&quot;websccket&quot;&gt;WebSccket协议&lt;/h2&gt;

&lt;p&gt;一旦web服务器与客户端之间建立起webSocket协议的通信连接，之后所有的通信都依靠这个专用协议进行。通信过程中可互相发送JSON、XML、HTML或图片等任意格式的数据。&lt;/p&gt;

&lt;h2 id=&quot;websccket&quot;&gt;WebSccket特点&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;1. 推送功能&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;服务器可以主动向客户端推送信息，客户端也可以主动向服务器发送信息，是真正的双向平等对话。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. 减少通信量&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;只要建立起WebSocket连接，就希望一直保持连接状态。和HTTP相比，不但每次连接时的总开销减少，而且由于WebSocket的首部信息很小，通信量也相应减少了。  &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. 没有同源限制&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;没有同源限制，客户端可以与任意服务器通信。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4. 协议标识符是ws&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;协议标识符是ws（如果加密，则为wss），服务器网址就是 URL。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;ws://example.com:80/some/path
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;websccket&quot;&gt;WebSccket实现&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;实现WebSocket通信，在HTTP连接建立后，需要完成一次“握手”的步骤。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;握手-请求&lt;/p&gt;

&lt;div class=&quot;rd&quot;&gt;
    &lt;img src=&quot;/assets/images/2017/10-11-12/11-01-2.png&quot; alt=&quot;&quot;&gt;
&lt;/div&gt;

&lt;p&gt;握手-相应&lt;/p&gt;

&lt;div class=&quot;rd&quot;&gt;
    &lt;img src=&quot;/assets/images/2017/10-11-12/11-01-3.png&quot; alt=&quot;&quot;&gt;
&lt;/div&gt;

&lt;p&gt;成功握手确立WebSocket连接之后，通信时不再使用HTTP的数据帧，而采用WebSocket独立的数据帧。&lt;/p&gt;

&lt;div class=&quot;rd&quot;&gt;
    &lt;img src=&quot;/assets/images/2017/10-11-12/11-01-4.png&quot; alt=&quot;&quot;&gt;
&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://www.w3.org/TR/websockets/&quot;&gt;W3C The WebSocket API&lt;/a&gt;&lt;br&gt;&lt;br&gt;
&lt;a href=&quot;http://www.ruanyifeng.com/blog/2017/05/websocket.html&quot;&gt;http://www.ruanyifeng.com/blog/2017/05/websocket.html&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;http-2-0-spdy&quot;&gt;HTTP/2.0：SPDY的升级版&lt;/h1&gt;

&lt;p&gt;HTTP/2.0的目标是改善用户在使用Web时的速度体验。&lt;/p&gt;

&lt;h2 id=&quot;http2-0-spdy&quot;&gt;HTTP2.0和SPDY的区别&lt;/h2&gt;

&lt;p&gt;HTTP2.0 支持明文 HTTP 传输，而 SPDY 强制使用 HTTPS&lt;/p&gt;

&lt;p&gt;HTTP2.0 消息头的压缩算法采用 HPACK，而非 SPDY 采用的 DEFLATE&lt;/p&gt;

&lt;h2 id=&quot;http-2-0&quot;&gt;HTTP/2.0的特点&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;SPDY&lt;/strong&gt;&lt;br&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;HTTP Speed + Mobility&lt;/strong&gt;&lt;br&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Network-Friendly HTTP Upgrade&lt;/strong&gt;&lt;br&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;HTTP Speed + Mobility 是用于改善并提高移动端通信时速度和性能的标准。基于SPDY和WebSocket。&lt;/p&gt;

&lt;p&gt;Network-Friendly HTTP Upgrade 主要是在移动端通信时改善HTTP性能的标准。&lt;/p&gt;

&lt;div class=&quot;rd&quot;&gt;
    &lt;img src=&quot;/assets/images/2017/10-11-12/11-01-5.png&quot; alt=&quot;&quot;&gt;
&lt;/div&gt;

&lt;h1 id=&quot;http1-1-http1-0&quot;&gt;HTTP1.1和HTTP1.0的区别&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;HTTP1.1增加host字段。HTTP1.1请求消息中如果没有Host头域会报告一个错误（400 Bad Request）。&lt;br&gt;&lt;/li&gt;
&lt;li&gt;HTTP1.1新增状态码。比如100、409(Conflict)、410(Gone)等。&lt;br&gt;&lt;/li&gt;
&lt;li&gt;HTTP1.1支持长连接。HTTP1.1中默认开启Connection： keep-alive&lt;br&gt;&lt;/li&gt;
&lt;li&gt;HTTP1.1支持分块传输&lt;br&gt;&lt;/li&gt;
&lt;li&gt;带宽优化及网络连接的使用。HTTP1.1则在请求头引入了range头域，它允许只请求资源的某个部分，即返回码是206（Partial Content）&lt;br&gt;&lt;/li&gt;
&lt;li&gt;缓存处理。在HTTP1.0中主要使用header里的If-Modified-Since,Expires来做为缓存判断的标准，HTTP1.1则引入了更多的缓存控制策略例如Entity tag，If-Unmodified-Since, If-Match, If-None-Match等更多可供选择的缓存头来控制缓存策略。&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;more&quot;&gt;更多-more&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.cnblogs.com/frankyou/p/6145485.html&quot;&gt;http://www.cnblogs.com/frankyou/p/6145485.html&lt;/a&gt;&lt;br&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.sohu.com/a/161201715_714863&quot;&gt;http://www.sohu.com/a/161201715_714863&lt;/a&gt;&lt;br&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://segmentfault.com/a/1190000002765886&quot;&gt;https://segmentfault.com/a/1190000002765886&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
                <link>/http/2017/11/01/http-http2</link>
                <guid>/http/2017/11/01/http-http2</guid>
                <pubDate>Wed, 01 Nov 2017 00:00:00 +0800</pubDate>
        </item>

        <item>
                <title>HTTP内容编码、传输编码、分块传输</title>
                <description>&lt;h1 id=&quot;http&quot;&gt;HTTP内容编码&lt;/h1&gt;

&lt;div class=&quot;rd&quot;&gt;
    &lt;img src=&quot;/assets/images/2017/10-11-12/11-01-20.png&quot; alt=&quot;&quot;&gt;
&lt;/div&gt;

&lt;p&gt;内容编码指明应用在实体内容上的编码格式，保持实体信息原样压缩。内容编码后的实体由客户端接收并负责解码。&lt;/p&gt;

&lt;h2 id=&quot;http&quot;&gt;HTTP内容编码类型&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;gzip (GNU zip)&lt;/li&gt;
&lt;li&gt;compress (UNIX系统的标准压缩)&lt;/li&gt;
&lt;li&gt;deflate (zlib)&lt;/li&gt;
&lt;li&gt;identity (不进行编码，默认)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;accept-encoding-content-encoding&quot;&gt;Accept-Encoding、Content-Encoding&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Accept-Encoding，HTTP请求头，指定浏览器可以支持的web服务器返回内容压缩编码类型。&lt;br&gt;&lt;/li&gt;
&lt;li&gt;Content-Encoding，HTTP响应头，web服务器支持的返回内容压缩编码类型。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;Accept-Encoding: compress, gzip
Accept-Encoding: *
Accept-Encoding: gzip;q=1.0, identity;q=0.5, *;q=0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;Content-Encoding: gzip
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id=&quot;http&quot;&gt;HTTP传输编码&lt;/h1&gt;

&lt;p&gt;使用传输编码是为了改变报文中的数据在网络上传输方式。&lt;/p&gt;

&lt;h2 id=&quot;transfer-encoding-te&quot;&gt;Transfer-Encoding、TE&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Transfer-Encoding，(多用作HTTP响应头) 告知接收方对其采用了何种传输编码方式&lt;br&gt;&lt;/li&gt;
&lt;li&gt;TE，HTTP请求头，客户端愿意接受的传输编码，并通知服务器接受接受尾加头信息&lt;br&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;Transfer-Encoding:chunked
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;TE: trailers,deflate;q=0.5
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id=&quot;http&quot;&gt;HTTP分块编码&lt;/h1&gt;

&lt;div class=&quot;rd&quot;&gt;
    &lt;img src=&quot;/assets/images/2017/10-11-12/11-01-21.png&quot; alt=&quot;&quot;&gt;
&lt;/div&gt;

&lt;p&gt;分块编码是一种传输编码，是报文的属性，不是主体的属性。&lt;/p&gt;

&lt;div class=&quot;rd&quot;&gt;
    &lt;img src=&quot;/assets/images/2017/10-11-12/11-01-22.png&quot; alt=&quot;&quot;&gt;
&lt;/div&gt;

&lt;h1 id=&quot;accept-charset&quot;&gt;Accept-Charset&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Accept-Charset：HTTP请求头,浏览器可以接受的字符编码集。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;常见字符集名称：ASCII字符集、GB2312字符集、BIG5字符集、GB18030字符集、Unicode字符集(UTF-8)等。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;Accept-Charset: iso-8859-5
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;Content-Type: text/html; Charset = utf-8
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href=&quot;http://www.w3school.com.cn/tags/html_ref_charactersets.asp&quot;&gt;HTML 字符集&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;more&quot;&gt;更多-more&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.cnblogs.com/skynet/archive/2011/05/03/2035105.html&quot;&gt;http://www.cnblogs.com/skynet/archive/2011/05/03/2035105.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.cnblogs.com/defias/p/3436517.html&quot;&gt;http://www.cnblogs.com/defias/p/3436517.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
                <link>/http/2017/11/01/http-encoding</link>
                <guid>/http/2017/11/01/http-encoding</guid>
                <pubDate>Wed, 01 Nov 2017 00:00:00 +0800</pubDate>
        </item>

        <item>
                <title>HTTP缓存</title>
                <description>&lt;h1 id=&quot;request&quot;&gt;浏览器request过程&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;浏览器第一次请求：&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;rd&quot;&gt;
    &lt;img src=&quot;/assets/images/2017/10-11-12/11-01-10.png&quot; alt=&quot;&quot;&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;浏览器再次请求时：&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;rd&quot;&gt;
    &lt;img src=&quot;/assets/images/2017/10-11-12/11-01-11.png&quot; alt=&quot;&quot;&gt;
&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/skynet/archive/2012/11/28/2792503.html&quot;&gt;参见&amp;quot;浏览器缓存机制&amp;quot;-吴秦&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;http-advantage&quot;&gt;HTTP缓存优点-advantage&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;减少了冗余的数据传输，节省了你的网络费用。&lt;br&gt;&lt;/li&gt;
&lt;li&gt;缓解了网络瓶颈的问题。不需要更多的带宽就能够更快的加载页面。&lt;br&gt;&lt;/li&gt;
&lt;li&gt;降低了对原始服务器的要求。服务器可以更快地响应，避免过载的出现。&lt;br&gt;&lt;/li&gt;
&lt;li&gt;降低了距离时延，因为从较远的地方加载页面会更慢一些。&lt;br&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;step&quot;&gt;缓存的处理步骤-step&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;接收 - 缓存从网络中读取抵达的请求报文。&lt;br&gt;&lt;/li&gt;
&lt;li&gt;解析 - 缓存对报文进行解析，提取URL和各种首部。&lt;br&gt;&lt;/li&gt;
&lt;li&gt;查询 - 缓存查看是否有本地副本可用，如果没有，就获取一份副本（并将其保存在本地）。&lt;br&gt;&lt;/li&gt;
&lt;li&gt;新鲜度检测 - 缓存查看已缓存副本是否足够新鲜，如果不是，就询问服务器是否有任何更新。&lt;br&gt;&lt;/li&gt;
&lt;li&gt;创建响应 - 缓存会用新的首部和已缓存的主体来构建一条响应报文。&lt;br&gt;&lt;/li&gt;
&lt;li&gt;发送 - 缓存通过网络将响应发回给客户端。&lt;br&gt;&lt;/li&gt;
&lt;li&gt;日志 - 缓存可选地创建一个日志文件条目来描述这个事务。&lt;br&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;http&quot;&gt;http报文中与缓存相关的首部字段&lt;/h1&gt;

&lt;h2 id=&quot;universal-cache&quot;&gt;通用缓存首部-Universal cache&lt;/h2&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;首部&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;th&gt;示例&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Cache-Control&lt;/td&gt;
&lt;td&gt;【HTTP/1.1】指定请求和响应遵循的缓存机制&lt;/td&gt;
&lt;td&gt;Cache-Control: no-cache&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Pragma&lt;/td&gt;
&lt;td&gt;【HTTP/1.0】随报文传送一些指令。通常来控制缓存。&lt;/td&gt;
&lt;td&gt;Pragma: no-cache&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;h2 id=&quot;request-header&quot;&gt;请求首部字段-request header&lt;/h2&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;首部&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;th&gt;示例&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;If-Match&lt;/td&gt;
&lt;td&gt;比较ETag是否一致，匹配才返回对象&lt;/td&gt;
&lt;td&gt;If-Match: “737060cd8c284d8af7ad3082f209582d”&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;If-None-Match&lt;/td&gt;
&lt;td&gt;比较ETag是否不一致&lt;/td&gt;
&lt;td&gt;If-None-Match: “737060cd8c284d8af7ad3082f209582d”&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;If-Modified-Since&lt;/td&gt;
&lt;td&gt;比较资源最后修改时间是否一致&lt;/td&gt;
&lt;td&gt;If-Modified-Since: Sat, 29 Oct 2010 19:43:31 GMT&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;If-Unmodified-Since&lt;/td&gt;
&lt;td&gt;只有实体在指定时间之后未被修改才请求成功&lt;/td&gt;
&lt;td&gt;If-Unmodified-Since: Sat, 29 Oct 2010 19:43:31 GMT&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;h2 id=&quot;response-header&quot;&gt;响应首部字段-Response header&lt;/h2&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;首部&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;th&gt;示例&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;ETag&lt;/td&gt;
&lt;td&gt;实体标记，某个特定资源版本的标识符&lt;/td&gt;
&lt;td&gt;ETag: “737060cd8c284d8af7ad3082f209582d”&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;h2 id=&quot;entity-cache&quot;&gt;实体缓存首部-Entity cache&lt;/h2&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;首部&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;th&gt;示例&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Expires&lt;/td&gt;
&lt;td&gt;【HTTP/1.0】实体主体过期的时间&lt;/td&gt;
&lt;td&gt;Expires: Thu, 01 Dec 2010 16:00:00 GMT&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Last-Modified&lt;/td&gt;
&lt;td&gt;资源的最后一次修改时间&lt;/td&gt;
&lt;td&gt;Last-Modified: Tue, 15 Nov 2010 12:45:26 GMT&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;h1 id=&quot;document-expiration&quot;&gt;文档过期-document expiration&lt;/h1&gt;

&lt;p&gt;HTTP采用&lt;code&gt;文档过期&lt;/code&gt;和&lt;code&gt;服务器再验证&lt;/code&gt;机制来检测副本的新鲜。&lt;/p&gt;

&lt;p&gt;文档过期也叫做&lt;code&gt;强缓存&lt;/code&gt;。&lt;/p&gt;

&lt;h2 id=&quot;expires&quot;&gt;Expires策略&lt;/h2&gt;

&lt;p&gt;HTTP/1.0给客户端设定缓存方式可通过两个字段——“Pragma”和“Expires”来规范。&lt;/p&gt;

&lt;h3 id=&quot;pragma&quot;&gt;Pragma来禁用缓存&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;“Pragma: no-cache”，会知会客户端不要对该资源读缓存，即每次都得向服务器发一次请求才行。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Pragma属于通用首部字段，在客户端上使用时，常规要求我们往html上加上这段meta元标签&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;http-equiv=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Pragma&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;content=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;no-cache&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;以上属于非HTTP协议定义的缓存机制,这行代码的用处很有限，因为只有IE识别&lt;/p&gt;

&lt;h3 id=&quot;expires&quot;&gt;Expires来启用缓存和定义缓存时间&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;Expires指定一个绝对的过期日期。&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;Expires: Thu, 01 Dec 2010 16:00:00 GMT
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Expires是Web服务器响应消息头字段，在响应http请求时告诉浏览器在过期时间前浏览器可以直接从浏览器缓存取数据，而无需再次请求。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;使用Expires缺点&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;响应报文中Expires所定义的缓存时间是相对服务器上的时间而言的，如果客户端上的时间跟服务器上的时间不一致（特别是用户修改了自己电脑的系统时间），那缓存时间可能就没啥意义了。&lt;/p&gt;

&lt;h2 id=&quot;cache-control&quot;&gt;Cache-control策略&lt;/h2&gt;

&lt;p&gt;HTTP/1.1使用 Cache-control: max-age 响应首部来指定过期日期。&lt;/p&gt;

&lt;p&gt;max-age值定义了文档的最大使用期，（以秒为单位），以下有效时间为一小时&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;Cache-Control: max-age=3600
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;Cache-Control优先级高于Expires&lt;/code&gt;  &lt;/p&gt;

&lt;p&gt;若报文中同时出现了 Pragma、Expires 和 Cache-Control，HTTP/1.1会以 Cache-Control 为准。&lt;/p&gt;

&lt;p&gt;HTTP/1.0会以 Expires 为准，忽略Cache-Control。&lt;/p&gt;

&lt;h1 id=&quot;server-revalidation&quot;&gt;服务器再验证-server revalidation&lt;/h1&gt;

&lt;p&gt;服务器再验证也叫做&lt;code&gt;协商缓存&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;有两种方式，检查缓存的新鲜度&lt;/p&gt;

&lt;p&gt;第一种方式是在上一次服务端告诉客户端约定的有效期的同时，告诉客户端该文件最后修改的时间，当再次试图从服务端下载该文件的时候，check下该文件有没有更新（对比最后修改时间），如果没有，则读取缓存；&lt;/p&gt;

&lt;p&gt;第二种方式是在上一次服务端告诉客户端约定有效期的同时，同时告诉客户端该文件的版本号，当服务端文件更新的时候，改变版本号，再次发送请求的时候check一下版本号是否一致就行了，如一致，则可直接读取缓存。&lt;/p&gt;

&lt;h2 id=&quot;if-modified-since-date&quot;&gt;If-Modified-Since: Date&lt;/h2&gt;

&lt;p&gt;Last-Modified/If-Modified-Since要配合Cache-Control使用。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Last-Modified：标示这个响应资源的最后修改时间。web服务器在响应请求时，告诉浏览器资源的最后修改时间。&lt;br&gt;&lt;/li&gt;
&lt;li&gt;If-Modified-Since：当资源过期时（使用Cache-Control标识的max-age），发现资源具有Last-Modified声明，则再次向web服务器请求时带上头 If-Modified-Since:  Last-Modified-value，表示请求时间。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;web服务器收到请求后发现有头If-Modified-Since 则与被请求资源的最后修改时间进行比对。&lt;br&gt;&lt;br&gt;
若最后修改时间较新，说明资源又被改动过，则响应整片资源内容（写在响应消息包体内），HTTP 200；&lt;br&gt;&lt;br&gt;
若最后修改时间较旧，说明资源无新修改，则响应HTTP 304 (无需包体，节省浏览)，告知浏览器继续使用所保存的cache。  &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;If-Modified-Since: Thu, 31 Mar 2016 07:07:52 GMT
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;if-none-match&quot;&gt;If-None-Match: &lt;tags&gt;&lt;/h2&gt;

&lt;p&gt;Etag/If-None-Match也要配合Cache-Control使用。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Etag：web服务器响应请求时，告诉浏览器当前资源在服务器的唯一标识（生成规则由服务器决定）。&lt;br&gt;&lt;/li&gt;
&lt;li&gt;If-None-Match：当资源过期时（使用Cache-Control标识的max-age），发现资源具有Etage声明，则再次向web服务器请求时带上头If-None-Match: ETag-value。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;web服务器收到请求后发现有头If-None-Match 则与被请求资源的相应校验串进行比对，决定返回200或304。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;If-None-Match: &quot;56fcccc8-1699&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;last-modified-etag&quot;&gt;既生Last-Modified何生Etag&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;有些文档可能会被周期性地重写，但实际包含的数据常是一样的。尽管内容没有变化，但修改日期会发生变化。&lt;br&gt;&lt;/li&gt;
&lt;li&gt;有些文档可能已经被修改了，但所做修改并不重要，不需要让世界范围内的缓存都重装数据（比如对拼写或注释的修改）。&lt;br&gt;&lt;/li&gt;
&lt;li&gt;有些服务器无法准确的判定其页面的最后修改日期。Last-Modified标注的最后修改只能精确到秒级，比如某些文件在1秒钟以内，被修改多次。&lt;br&gt;&lt;/li&gt;
&lt;li&gt;有些服务器提供的文档会在亚秒间隙发生变化（比如实时监视器），对于这些服务器来说，以一秒为粒度的修改日期可能就不够用了。&lt;br&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Etag是服务器自动生成或者由开发者生成的对应资源在服务器端的唯一标识符，能够更加准确的控制缓存。&lt;br&gt;&lt;br&gt;
Last-Modified与ETag是可以一起使用的，&lt;code&gt;服务器会优先验证ETag&lt;/code&gt;，一致的情况下，才会继续比对Last-Modified，最后才决定是否返回304。&lt;/p&gt;

&lt;h2 id=&quot;when-use-if-none-match-if-modified-since&quot;&gt;when use If-None-Match和If-Modified-Since&lt;/h2&gt;

&lt;p&gt;什么时候应该使用实体标签和最近修改日期&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;如果服务器回送了一个实体标签，HTTP/1.1客户端就必须使用实体标签验证器。&lt;br&gt;&lt;/li&gt;
&lt;li&gt;如果服务器只回送了一个Last-Modified值，客户端可以使用If-Modified-Since验证。&lt;br&gt;&lt;/li&gt;
&lt;li&gt;如果实体标签和最后修改日期都提供了，客户端就应该使用这两种再验证方法，这样HTTP/1.0和HTTP/1.1缓存就都可以正确响应了。&lt;br&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;除非HTTP/1.1原始服务器无法生成实体标签验证器，否则就应该发送一个出去。&lt;/p&gt;

&lt;p&gt;如果HTTP/1.1缓存或服务器收到的请求既带有If-Modified-Since，又带有实体标签条件首部，那么只有这两个条件都满足时，才能返回304 Not Modified响应。&lt;/p&gt;

&lt;h1 id=&quot;user-behavior&quot;&gt;用户行为与缓存-User behavior&lt;/h1&gt;

&lt;p&gt;如果直接在地址栏按回车，响应HTTP200（from cache），因为有效期还没过直接读取的缓存；&lt;br&gt;
如果ctrl+r进行刷新，则会相应HTTP304（Not Modified），虽然还是读取的本地缓存，但是多了一次服务端的请求；&lt;br&gt;
而如果是ctrl+shift+r强刷，则会直接从服务器下载新的文件，响应HTTP200。&lt;/p&gt;

&lt;div class=&quot;rd&quot;&gt;
    &lt;img src=&quot;/assets/images/2017/10-11-12/11-01-12.png&quot; alt=&quot;&quot;&gt;
&lt;/div&gt;

&lt;p&gt;当用户在按F5进行刷新的时候，会忽略Expires/Cache-Control的设置，会再次发送请求去服务器请求，而Last-Modified/Etag还是有效的，服务器会根据情况判断返回304还是200；&lt;/p&gt;

&lt;p&gt;而当用户使用Ctrl+F5进行强制刷新的时候，只是所有的缓存机制都将失效，重新从服务器拉去资源。&lt;/p&gt;

&lt;h1 id=&quot;cache&quot;&gt;cache实际应用&lt;/h1&gt;

&lt;h2 id=&quot;can&quot;&gt;can被缓存的内容&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;css样式表&lt;br&gt;&lt;/li&gt;
&lt;li&gt;js文件&lt;br&gt;&lt;/li&gt;
&lt;li&gt;logo、图标&lt;br&gt;&lt;/li&gt;
&lt;li&gt;html文件&lt;br&gt;&lt;/li&gt;
&lt;li&gt;可以下载的内容&lt;br&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;&gt;经常改变的文件&lt;/h3&gt;

&lt;p&gt;Cache-Control:no-cache，Cache-Control:max-age=0&lt;/p&gt;

&lt;p&gt;比如入口index.html文件，文件内容改变但名称不变的资源。&lt;/p&gt;

&lt;h3 id=&quot;&gt;不经常改变的文件&lt;/h3&gt;

&lt;p&gt;给max-age设置一个较大的值，一般设置max-age=31536000(一年，最大值)。&lt;/p&gt;

&lt;p&gt;比如引入的第三方文件、打包出来的带有hash后缀css、js文件。一般来说文件内容改变了，会更新版本号、hash值，相当于请求另一个文件&lt;/p&gt;

&lt;h2 id=&quot;unable&quot;&gt;不能缓存的请求-Unable&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;HTTP信息头中包含Cache-Control:no-cache，Cache-Control:max-age=0，pragma:no-cache（HTTP1.0）等告诉浏览器不用缓存的请求&lt;br&gt;&lt;/li&gt;
&lt;li&gt;需要根据Cookie，认证信息等决定输入内容的动态请求是不能被缓存的&lt;br&gt;&lt;/li&gt;
&lt;li&gt;经过HTTPS安全加密的请求（有人也经过测试发现，ie其实在头部加入Cache-Control：max-age信息，firefox在头部加入Cache-Control:Public之后，能够对HTTPS的资源进行缓存，&lt;a href=&quot;http://www.ruanyifeng.com/blog/2011/02/seven_myths_about_https.html&quot;&gt;参考《HTTPS的七个误解》&lt;/a&gt;）&lt;br&gt;&lt;/li&gt;
&lt;li&gt;POST请求无法被缓存&lt;br&gt;&lt;/li&gt;
&lt;li&gt;HTTP响应头中不包含Last-Modified/Etag，也不包含Cache-Control/Expires的请求无法被缓存&lt;br&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;cache-control&quot;&gt;Cache-control详解&lt;/h1&gt;

&lt;p&gt;通过指定首部字段Cache-control的指令，就能操作缓存的工作机制。&lt;/p&gt;

&lt;div class=&quot;rd&quot;&gt;
    &lt;img src=&quot;/assets/images/2017/10-11-12/11-01-13.png&quot; alt=&quot;&quot;&gt;
&lt;/div&gt;

&lt;p&gt;指令的参数是可选的，多个指令之间通过“，”分隔。Cache-control指令可用于请求和响应。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;Cache-control: private, max-age=0, no-cache
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;缓存请求指令&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;rd&quot;&gt;
    &lt;img src=&quot;/assets/images/2017/10-11-12/11-01-14.png&quot; alt=&quot;&quot;&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;缓存响应指令&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;rd&quot;&gt;
    &lt;img src=&quot;/assets/images/2017/10-11-12/11-01-15.png&quot; alt=&quot;&quot;&gt;
&lt;/div&gt;

&lt;h2 id=&quot;a&quot;&gt;表示是否能缓存的指令-a&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;public 指令&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;Cache-Control: public
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;当指定使用public指令时，则明确表明其他用户也可以利用缓存。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;private 指令&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;rd&quot;&gt;
    &lt;img src=&quot;/assets/images/2017/10-11-12/11-01-16.png&quot; alt=&quot;&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;Cache-Control: private
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;当指定private指令后，响应只以特定的用户作为对象，与public相反。&lt;/p&gt;

&lt;p&gt;缓存服务器会对该特定用户提供资源缓存的服务，对于其他用户发送过来的请求，代理服务器则不会返回缓存。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;no-cache 指令&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;rd&quot;&gt;
    &lt;img src=&quot;/assets/images/2017/10-11-12/11-01-17.png&quot; alt=&quot;&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;Cache-Control: no-cache
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;使用no-cache指令的目的是为了防止从缓存中返回过期的资源。&lt;/p&gt;

&lt;p&gt;客户端发送的请求中如果包含no-cache指令，则表示客户端将不会接收缓存过的响应。于是，缓存服务器必须把客户端请求转发给源服务器。&lt;/p&gt;

&lt;p&gt;如果服务器返回的响应中包含no-cache指令,缓存服务器&lt;code&gt;可以缓存&lt;/code&gt;，但是只有在跟WEB服务器验证了其有效后，才能返回给客户端&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;Cache-Control: no-cache = Location
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果服务器返回的响应中，若报文首部字段Cache-Control中对no-cache字段名具体指定参数值，那么缓存服务器不能对资源进行缓存。源服务器以后也将不再对缓存服务器请求提出的资源有效性进行确认，且禁止其对响应资源进行缓存操作。&lt;/p&gt;

&lt;h2 id=&quot;b&quot;&gt;控制可执行缓存对象的指令-b&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;no-store 指令&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;Cache-Control: no-store
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;当使用no-store指令时，暗示请求或响应中包含机密信息。&lt;/p&gt;

&lt;p&gt;no-store是&lt;code&gt;真正地不进行缓存&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;因此，该指令规定缓存不能在本地存储请求或响应的任何一部分。&lt;/p&gt;

&lt;h2 id=&quot;c&quot;&gt;指定缓存期限和认证的指令-c&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;s-maxage 指令&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;Cache-Control: s-maxage = 3600（单位：秒）
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;s-maxage指令的功能和max-age指令的相同。&lt;/p&gt;

&lt;p&gt;它们的不同点是s-maxage指令只适用于供多位用户使用的公共缓存服务器（一般指代理）。也就是说，对于向同一用户重复返回响应的服务器来说，这个指令没有任何作用。&lt;/p&gt;

&lt;p&gt;另外，当使用s-maxage指令后，则直接忽略对Expires首部字段及max-age指令的处理。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;max-age 指令&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;rd&quot;&gt;
    &lt;img src=&quot;/assets/images/2017/10-11-12/11-01-18.png&quot; alt=&quot;&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;Cache-Control: max-age = 3600（单位：秒）
Cache-Control: max-age = 0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;当客户端发送的请求中包含max-age指令时，如果判定缓存资源的缓存时间数值比指定时间的数值更小，那么客户端就接收缓存的资源。&lt;/p&gt;

&lt;p&gt;当指定max-age = 0，时，那么缓存服务器通常需要将请求转发给源服务器。&lt;/p&gt;

&lt;p&gt;当源服务器返回的响应中包含max-age指令时，缓存服务器将不对资源的有效性再作确认，而max-age数值代表保存为缓存的最长时间。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;min-fresh 指令&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;rd&quot;&gt;
    &lt;img src=&quot;/assets/images/2017/10-11-12/11-01-19.png&quot; alt=&quot;&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;Cache-Control: min-fresh = 60（单位：秒）
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;min-fresh指令要求缓存服务器返回至少还未过指定时间的缓存资源。&lt;/p&gt;

&lt;p&gt;比如，当指定min-fresh = 60后，过了60秒的资源都无法作为响应返回了。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;max-stale 指令&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;Cache-Control: max-stale = 60（单位：秒）
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;使用max-stale可指示缓存资源，即使过期也照常接收。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;only-if-cached 指令&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;Cache-Control: only-if-cached
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;使用only-if-cached指令表示客户端仅在缓存服务器本地缓存目标资源的情况下才会要求其返回。&lt;/p&gt;

&lt;p&gt;换言之，该指令要求缓存服务器不重新加载响应，也不会再次确认资源有效性。若发生请求缓存服务器的本地缓存无响应，则返回504 Gateway Timeout。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;must-revalidate 指令&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;Cache-Control: must-revalidate 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;使用must-revalidate 指令，代理会向源服务器再次验证即将返回的响应缓存目前是否任然有效。&lt;/p&gt;

&lt;p&gt;若代理无法连通源服务器再次获取有效资源的话，缓存必须给客户端一条504状态码。&lt;/p&gt;

&lt;p&gt;另外，使用must-revalidate 指令会忽略请求的max-stale 指令。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;proxy-revalidate 指令&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;Cache-Control: proxy-revalidate
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;proxy-revalidate指令要求所有的缓存服务器在接收到客户端带有该指令的请求返回响应之前，必须再次验证缓存的有效性。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;no-transform 指令&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;Cache-Control: no-transform
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;使用no-transform指令规定无论是在请求还是响应中，缓存都不能改变实体主体的媒体类型。&lt;/p&gt;

&lt;p&gt;这样做可防止缓存或代理压缩图片等类似操作。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://blog.csdn.net/chen_zw/article/details/18924875&quot;&gt;http://blog.csdn.net/chen_zw/article/details/18924875&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;cache-control&quot;&gt;cache-control应该怎么设置更好？&lt;/h2&gt;

&lt;p&gt;对于图片，css,等长期不变化的内容应该设置较长的过期时间（如180天）&lt;/p&gt;

&lt;p&gt;建议：&lt;/p&gt;

&lt;p&gt;1.对于js和css可以独立到一个二级域名中，启用GZIP，且设置较长的过期时间&lt;/p&gt;

&lt;p&gt;2.对于图片独立到另一个二级域名中，且设置较长的过期时间&lt;/p&gt;

&lt;p&gt;3.对于静态文件(html)如果长期不更新也可以设置稍长的过期时间（如30天），需要根据当前网站的实际而定。&lt;/p&gt;

&lt;p&gt;4.对于动态文件(php)可以设置较短的过期时间（如120秒）&lt;/p&gt;

&lt;h1 id=&quot;more&quot;&gt;更多-more&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://www.codeceo.com/article/broswer-http-cache.html#0-tsina-1-75257-397232819ff9a47a7b7e80a40613cfe1&quot;&gt;http://www.codeceo.com/article/broswer-http-cache.html#0-tsina-1-75257-397232819ff9a47a7b7e80a40613cfe1&lt;/a&gt;  &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/zichi/p/4685822.html&quot;&gt;http://www.cnblogs.com/zichi/p/4685822.html&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
                <link>/http/2017/11/01/http-cache</link>
                <guid>/http/2017/11/01/http-cache</guid>
                <pubDate>Wed, 01 Nov 2017 00:00:00 +0800</pubDate>
        </item>

        <item>
                <title>HTTPS</title>
                <description>&lt;h1 id=&quot;http-https&quot;&gt;HTTP和HTTPS的区别&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;HTTP 的 URL 以 http:// 开头，而 HTTPS 的 URL 以 https:// 开头&lt;br&gt;&lt;/li&gt;
&lt;li&gt;HTTP 是不安全的，而 HTTPS 是安全的。HTTPS使用安全套接字层（SSL）进行信息交换，是HTTP的安全版&lt;br&gt;&lt;/li&gt;
&lt;li&gt;HTTP 标准端口是 80 ，而 HTTPS 的标准端口是 443&lt;br&gt;&lt;/li&gt;
&lt;li&gt;在 OSI 网络模型中，HTTP 工作于应用层，而 HTTPS 工作在传输层&lt;br&gt;&lt;/li&gt;
&lt;li&gt;HTTP 无需加密，而 HTTPS 对传输的数据进行加密&lt;br&gt;&lt;/li&gt;
&lt;li&gt;HTTP 无需证书，而 HTTPS 需要认证证书&lt;br&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;http&quot;&gt;HTTP的缺点&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;通信使用明文(不加密), 内容可能会被窃听&lt;br&gt;&lt;/li&gt;
&lt;li&gt;不验证通信方的身份, 因此有可能遭遇伪装&lt;br&gt;&lt;/li&gt;
&lt;li&gt;无法证明报文的完整性, 所以有可能已遭篡改&lt;br&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;a&quot;&gt;通信使用明文可能会被窃听-a&lt;/h2&gt;

&lt;h3 id=&quot;tcp-ip&quot;&gt;TCP/IP是可能被窃听的网络&lt;/h3&gt;

&lt;div class=&quot;rd&quot;&gt;
    &lt;img src=&quot;/assets/images/2017/10-11-12/10-31-7.png&quot; alt=&quot;&quot;&gt;
&lt;/div&gt;

&lt;p&gt;即使已经经过加密处理的通信，也会被窥视到通信内容。但无法破解报文信息的含义。&lt;/p&gt;

&lt;h3 id=&quot;encryption&quot;&gt;加密处理防止被窃听-encryption&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;通信的加密&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;HTTP协议通过和SSL(Secure Socket Layer,安全套接层)或TLS(Transport Layer Security,安全层传输协议)组合使用，加密HTTP的通信内容。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;内容的加密&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;把HTTP报文里所含的内容进行加密处理后再发送。&lt;/p&gt;

&lt;h2 id=&quot;b&quot;&gt;不验证通信方的身份就可能遭遇伪装-b&lt;/h2&gt;

&lt;h3 id=&quot;anyone&quot;&gt;任何人都可发起请求-anyone&lt;/h3&gt;

&lt;div class=&quot;rd&quot;&gt;
    &lt;img src=&quot;/assets/images/2017/10-11-12/10-31-8.png&quot; alt=&quot;&quot;&gt;
&lt;/div&gt;

&lt;h3 id=&quot;certificate&quot;&gt;查明对手的证书-certificate&lt;/h3&gt;

&lt;div class=&quot;rd&quot;&gt;
    &lt;img src=&quot;/assets/images/2017/10-11-12/10-31-9.png&quot; alt=&quot;&quot;&gt;
&lt;/div&gt;

&lt;h2 id=&quot;c&quot;&gt;无法证明报文的完整性, 可能已遭篡改-c&lt;/h2&gt;

&lt;h3 id=&quot;error&quot;&gt;接收到的内容可能有误-Error&lt;/h3&gt;

&lt;div class=&quot;rd&quot;&gt;
    &lt;img src=&quot;/assets/images/2017/10-11-12/10-31-10.png&quot; alt=&quot;&quot;&gt;
&lt;/div&gt;

&lt;h3 id=&quot;&gt;如何防止篡改&lt;/h3&gt;

&lt;p&gt;使用MD5和SHA-1来确认文件的数字签名。&lt;/p&gt;

&lt;h1 id=&quot;https&quot;&gt;HTTPS&lt;/h1&gt;

&lt;p&gt;HTTP + 加密 + 认证 + 完整性保护 = HTTPS&lt;/p&gt;

&lt;h2 id=&quot;http-https&quot;&gt;HTTP + 加密 + 认证 + 完整性保护 = HTTPS&lt;/h2&gt;

&lt;div class=&quot;rd&quot;&gt;
    &lt;img src=&quot;/assets/images/2017/10-11-12/10-31-11.png&quot; alt=&quot;&quot;&gt;
&lt;/div&gt;

&lt;h2 id=&quot;https-ssl-http&quot;&gt;HTTPS是身披SSL外壳的HTTP&lt;/h2&gt;

&lt;p&gt;通常情况下HTTP是直接和TCP层进行通信的。当使用SSL(安全套阶字)时,则演变成HTTP先和SSL通信,SSL再和TCP通信的了。&lt;/p&gt;

&lt;div class=&quot;rd&quot;&gt;
    &lt;img src=&quot;/assets/images/2017/10-11-12/10-31-12.png&quot; alt=&quot;&quot;&gt;
&lt;/div&gt;

&lt;h2 id=&quot;encryption&quot;&gt;加密技术-encryption&lt;/h2&gt;

&lt;p&gt;SSL采用的是一种叫做公开密钥加密的加密处理方式&lt;/p&gt;

&lt;h3 id=&quot;symmetric-encryption&quot;&gt;对称加密-Symmetric encryption&lt;/h3&gt;

&lt;p&gt;加密和解密用的一个密钥的方式称为对称加密,也叫做共享密钥加密&lt;/p&gt;

&lt;div class=&quot;rd&quot;&gt;
    &lt;img src=&quot;/assets/images/2017/10-11-12/10-31-12.png&quot; alt=&quot;&quot;&gt;
&lt;/div&gt;

&lt;p&gt;对称加密在发送加密信息时也需要将密钥发送给对方,但这样可以被攻击者截取,就不安全啦&lt;/p&gt;

&lt;div class=&quot;rd&quot;&gt;
    &lt;img src=&quot;/assets/images/2017/10-11-12/10-31-14.png&quot; alt=&quot;&quot;&gt;
&lt;/div&gt;

&lt;h3 id=&quot;asymmetric-encryption&quot;&gt;非对称加密-Asymmetric encryption&lt;/h3&gt;

&lt;p&gt;非对称加密又称作公开密钥加密,它很好的解决了对称加密密钥被截取的问题。&lt;/p&gt;

&lt;p&gt;非对称加密采用一对非对称的密钥,一把叫做私有密钥,一把叫做共有密钥。&lt;/p&gt;

&lt;p&gt;使用非对称加密,发送密文一方使用对方的共有密钥进行加密处理,对方收到加密信息后,再使用自己的私有密钥进行解密。&lt;/p&gt;

&lt;div class=&quot;rd&quot;&gt;
    &lt;img src=&quot;/assets/images/2017/10-11-12/10-31-15.png&quot; alt=&quot;&quot;&gt;
&lt;/div&gt;

&lt;h3 id=&quot;https&quot;&gt;HTTPS采用混合加密机制&lt;/h3&gt;

&lt;p&gt;HTTPS采用对称加密和非对称加密所混合的加密机制。&lt;/p&gt;

&lt;p&gt;若密钥能安全交换,那么有可能仅考虑非对称加密。&lt;/p&gt;

&lt;p&gt;但是非对称加密与对称加密相比,处理速度相对较慢。&lt;/p&gt;

&lt;div class=&quot;rd&quot;&gt;
    &lt;img src=&quot;/assets/images/2017/10-11-12/10-31-16.png&quot; alt=&quot;&quot;&gt;
&lt;/div&gt;

&lt;h3 id=&quot;certificate&quot;&gt;证明公开密钥正确性的证书-certificate&lt;/h3&gt;

&lt;p&gt;使用数字证书认证机构和其颁布的公开密钥证书进行认证。即让第三方独立机构进行验证。&lt;/p&gt;

&lt;div class=&quot;rd&quot;&gt;
    &lt;img src=&quot;/assets/images/2017/10-11-12/10-31-17.png&quot; alt=&quot;&quot;&gt;
&lt;/div&gt;

&lt;h2 id=&quot;https&quot;&gt;HTTPS安全通信机制&lt;/h2&gt;

&lt;div class=&quot;rd&quot;&gt;
    &lt;img src=&quot;/assets/images/2017/10-11-12/10-31-18.png&quot; alt=&quot;&quot;&gt;
&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;http://www.jianshu.com/p/e634784e7b00&quot;&gt;http://www.jianshu.com/p/e634784e7b00&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;完整的HTTPS的通信过程&lt;/p&gt;

&lt;div class=&quot;rd&quot;&gt;
    &lt;img src=&quot;/assets/images/2017/10-11-12/10-31-19.png&quot; alt=&quot;&quot;&gt;
&lt;/div&gt;

&lt;h2 id=&quot;https&quot;&gt;为什么不一直使用HTTPS&lt;/h2&gt;

&lt;p&gt;HTTPS的缺点&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;加密通信与纯文本通信相比,消耗更多的CPU和内存资源&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;购买证书是要钱的！&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;少许对客户端有要求的情况下,会要求客户端也必须有一个证书.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;这里客户端证书,其实就类似表示个人信息的时候,除了用户名/密码, 还有一个CA 认证过的身份. 应为个人证书一般来说上别人无法模拟的,所有这样能够更深的确认自己的身份&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;目前少数个人银行的专业版是这种做法,具体证书可能是拿U盘作为一个备份的载体&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;ssl&quot;&gt;SSL慢吗&lt;/h3&gt;

&lt;p&gt;当使用SSL时，它的处理速度变慢&lt;/p&gt;

&lt;div class=&quot;rd&quot;&gt;
    &lt;img src=&quot;/assets/images/2017/10-11-12/10-31-20.png&quot; alt=&quot;&quot;&gt;
&lt;/div&gt;

&lt;p&gt;使用SSL加速器硬件来改善计算速度。&lt;/p&gt;

&lt;h1 id=&quot;https&quot;&gt;HTTPS的工作原理&lt;/h1&gt;

&lt;p&gt;1、客户端发起HTTPS请求&lt;br&gt;&lt;br&gt;
2、服务端的配置数字证书&lt;br&gt;&lt;br&gt;
3、传送证书&lt;br&gt;&lt;br&gt;
4、客户端解析证书&lt;br&gt;&lt;br&gt;
5、传送加密信息&lt;br&gt;&lt;br&gt;
6、服务段解密信息&lt;br&gt;&lt;br&gt;
7、传输加密后的信息&lt;br&gt;&lt;br&gt;
8、客户端解密信息  &lt;/p&gt;

&lt;h1 id=&quot;https&quot;&gt;什么时候该使用 HTTPS&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;银行网站&lt;br&gt;&lt;/li&gt;
&lt;li&gt;支付网关&lt;br&gt;&lt;/li&gt;
&lt;li&gt;购物网站&lt;br&gt;&lt;/li&gt;
&lt;li&gt;登录页&lt;br&gt;&lt;/li&gt;
&lt;li&gt;电子邮件&lt;br&gt;&lt;/li&gt;
&lt;li&gt;一些企业部门的网站&lt;br&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;more&quot;&gt;更多-more&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://juejin.im/entry/58d7635e5c497d0057fae036&quot;&gt;https://juejin.im/entry/58d7635e5c497d0057fae036&lt;/a&gt;&lt;br&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.jianshu.com/p/37654eb66b58&quot;&gt;http://www.jianshu.com/p/37654eb66b58&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
                <link>/http/2017/10/31/http-https</link>
                <guid>/http/2017/10/31/http-https</guid>
                <pubDate>Tue, 31 Oct 2017 00:00:00 +0800</pubDate>
        </item>

        <item>
                <title>代理、缓存、网关、隧道</title>
                <description>&lt;h1 id=&quot;http&quot;&gt;HTTP代理、缓存、网关、隧道&lt;/h1&gt;

&lt;p&gt;通信数据转发程序：代理、网关、隧道&lt;/p&gt;

&lt;h1 id=&quot;agent&quot;&gt;代理-agent&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;位于客户端和服务器之间的HTTP中间实体。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;代理是一种有转发功能的应用程序。接收由客户端发送的请求并转发给服务器，同时也接收服务器返回的响应并转发给客户端。&lt;/p&gt;

&lt;div class=&quot;rd&quot;&gt;
    &lt;img src=&quot;/assets/images/2017/10-11-12/10-31-1.png&quot; alt=&quot;&quot;&gt;
&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;缓存代理，会预先将资源的副本（缓存）保存在代理服务器上。&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
&lt;li&gt;透明代理，转发请求或响应时，不对报文做任何加工的代理类型。&lt;br&gt;&lt;/li&gt;
&lt;li&gt;非透明代理，对报文内容进行加工的代理。&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;gateway&quot;&gt;网关-gateway&lt;/h1&gt;

&lt;p&gt;连接其他应用程序的特殊Web服务器。&lt;/p&gt;

&lt;p&gt;通常用于将HTTP流量转换成其他的协议。&lt;strong&gt;提供非HTTP协议服务。&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;rd&quot;&gt;
    &lt;img src=&quot;/assets/images/2017/10-11-12/10-31-2.png&quot; alt=&quot;&quot;&gt;
&lt;/div&gt;

&lt;p&gt;网关优点：&lt;/p&gt;

&lt;p&gt;利用网关能提高通信的安全性，因为可以在客户端与网关之间的通行线路上加密以确保连接的安全。&lt;/p&gt;

&lt;p&gt;网关用处：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;网关可以连接数据库，使用SQL语句查询数据。&lt;br&gt;&lt;/li&gt;
&lt;li&gt;web购物网站上进行信用卡结算时，网关可以和信用卡结算系统联动。&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;tunnel&quot;&gt;隧道-tunnel&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;对HTTP通信报文进行盲目转发且不会窥探数据的特殊代理。&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;rd&quot;&gt;
    &lt;img src=&quot;/assets/images/2017/10-11-12/10-31-3.png&quot; alt=&quot;&quot;&gt;
&lt;/div&gt;

&lt;p&gt;隧道的目的：&lt;/p&gt;

&lt;p&gt;确保客户端能与服务器进行安全的通信。SSL&lt;/p&gt;

&lt;h1 id=&quot;cache&quot;&gt;保存资源的缓存-cache&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;缓存是指代理服务器或客户端本地磁盘保存的资源副本。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;利用缓存可减少对服务器的访问，因此也就节省了通信流量和通信时间。&lt;/p&gt;

&lt;div class=&quot;rd&quot;&gt;
    &lt;img src=&quot;/assets/images/2017/10-11-12/10-31-4.png&quot; alt=&quot;&quot;&gt;
&lt;/div&gt;

&lt;p&gt;缓存服务器是代理服务器的一种&lt;/p&gt;

&lt;h2 id=&quot;cache&quot;&gt;cache的有效期限&lt;/h2&gt;

&lt;div class=&quot;rd&quot;&gt;
    &lt;img src=&quot;/assets/images/2017/10-11-12/10-31-5.png&quot; alt=&quot;&quot;&gt;
&lt;/div&gt;

&lt;p&gt;当判定缓存过期后，缓存服务器需向源服务器确认资源的有效性&lt;/p&gt;

&lt;h2 id=&quot;web&quot;&gt;客户端的缓存-web&lt;/h2&gt;

&lt;p&gt;浏览器缓存如果有效，就不必再向服务器请求相同的资源了，可以直接从本地磁盘内读取。&lt;/p&gt;

&lt;div class=&quot;rd&quot;&gt;
    &lt;img src=&quot;/assets/images/2017/10-11-12/10-31-6.png&quot; alt=&quot;&quot;&gt;
&lt;/div&gt;
</description>
                <link>/http/2017/10/31/http-agent-cache-gateway-tunnel</link>
                <guid>/http/2017/10/31/http-agent-cache-gateway-tunnel</guid>
                <pubDate>Tue, 31 Oct 2017 00:00:00 +0800</pubDate>
        </item>

        <item>
                <title>HTTP协议的基础</title>
                <description>&lt;h1 id=&quot;http&quot;&gt;HTTP协议的基础&lt;/h1&gt;

&lt;h2 id=&quot;http&quot;&gt;HTTP协议用于客户端和服务器端之间的通信&lt;/h2&gt;

&lt;p&gt;请求访问文本或图像等资源的一端称为客户端，而提供资源响应的一端称为服务器端。&lt;/p&gt;

&lt;h2 id=&quot;http&quot;&gt;HTTP通过请求和响应的交换达成通信&lt;/h2&gt;

&lt;div class=&quot;rd&quot;&gt;
    &lt;img src=&quot;/assets/images/2017/10-11-12/10-30-5.png&quot; alt=&quot;&quot;&gt;
&lt;/div&gt;

&lt;h2 id=&quot;http&quot;&gt;HTTP是不保存状态的协议&lt;/h2&gt;

&lt;p&gt;无状态(stateless)协议。&lt;/p&gt;

&lt;p&gt;HTTP协议自身不对请求和响应之间的通信状态进行保存。即对于发送过的请求或响应都不做持久化处理。&lt;/p&gt;

&lt;div class=&quot;rd&quot;&gt;
    &lt;img src=&quot;/assets/images/2017/10-11-12/10-30-6.png&quot; alt=&quot;&quot;&gt;
&lt;/div&gt;

&lt;h2 id=&quot;uri&quot;&gt;请求URI定位资源&lt;/h2&gt;

&lt;div class=&quot;rd&quot;&gt;
    &lt;img src=&quot;/assets/images/2017/10-11-12/10-30-7.png&quot; alt=&quot;&quot;&gt;
&lt;/div&gt;

&lt;h2 id=&quot;http&quot;&gt;告知服务器意图的HTTP方法&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;GET：获取资源&lt;/li&gt;
&lt;li&gt;POST：传输实体的主体&lt;/li&gt;
&lt;li&gt;PUT：传输文件&lt;/li&gt;
&lt;li&gt;HEAD：获得报文首部。用于确认URI的有效性及资源更新日期时间等。&lt;/li&gt;
&lt;li&gt;DELETE：删除文件&lt;/li&gt;
&lt;li&gt;OPTIONS：询问支持的方法。&lt;/li&gt;
&lt;li&gt;TRACE：追踪路径&lt;/li&gt;
&lt;li&gt;CONNECT：要求用隧道协议连接代理。使用SSL和TLS协议把通信内容加密后经网络隧道传输。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;method&quot;&gt;使用方法下达命令Method&lt;/h2&gt;

&lt;h2 id=&quot;keep-alive&quot;&gt;持久连接省通信量Keep-Alive&lt;/h2&gt;

&lt;p&gt;HTTP协议的初始版本中，每进行一次HTTP通信就要断开一次TCP连接。&lt;/p&gt;

&lt;p&gt;当需要请求的资源较多时，每次请求都会造成TCP连接建立和断开，增加通信量的开销。&lt;/p&gt;

&lt;div class=&quot;rd&quot;&gt;
    &lt;img src=&quot;/assets/images/2017/10-11-12/10-30-8.png&quot; alt=&quot;&quot;&gt;
&lt;/div&gt;

&lt;h3 id=&quot;keep-alive&quot;&gt;持久连接Keep-Alive&lt;/h3&gt;

&lt;p&gt;HTTP/1.1提出了了持久连接。只要任意一端没有明确提出断开连接，则保持TCP连接状态。&lt;/p&gt;

&lt;div class=&quot;rd&quot;&gt;
    &lt;img src=&quot;/assets/images/2017/10-11-12/10-30-9.png&quot; alt=&quot;&quot;&gt;
&lt;/div&gt;

&lt;p&gt;持久连接旨在建立1次TCP连接后进行多次请求和响应的交互。&lt;/p&gt;

&lt;p&gt;HTTP/1.1中，所有的连接默认都是持久连接。&lt;/p&gt;

&lt;p&gt;持久连接的好处在于减少了TCP连接的重复建立和断开造成的额外开销，减轻了服务器端的负载。另外，减少开销的那部分时间，使HTTP请求和响应能够提早结束，这样Web页面的显示速度也就相应提高了。&lt;/p&gt;

&lt;h3 id=&quot;pipelining&quot;&gt;管线化pipelining&lt;/h3&gt;

&lt;p&gt;持久连接使得多数请求以管线化方式发送成为可能。&lt;/p&gt;

&lt;p&gt;从前发送请求后需等待并收到响应，才能发送下一个请求。&lt;/p&gt;

&lt;p&gt;管线化技术出现后，不用等待响应亦可直接发送下一个请求。&lt;/p&gt;

&lt;p&gt;这样就能够做到同时并行发送多个请求，而不需要一个接一个地等待响应了。&lt;/p&gt;

&lt;div class=&quot;rd&quot;&gt;
    &lt;img src=&quot;/assets/images/2017/10-11-12/10-30-10.png&quot; alt=&quot;&quot;&gt;
&lt;/div&gt;

&lt;h2 id=&quot;cookie&quot;&gt;使用Cookie的状态管理&lt;/h2&gt;

&lt;p&gt;HTTP是无状态协议&lt;/p&gt;

&lt;p&gt;Cookie技术通过在请求和响应报文中写入Cookie信息来控制客户端的状态。&lt;/p&gt;

&lt;p&gt;Cookie会根据从服务器端发送的响应报文内的一个叫做Set-Cookie的首部字段信息，通知客户端保存Cookie。当下次客户端再往该服务器发送请求时，客户端会自动在请求报文中加入Cookie值后发送出去。&lt;/p&gt;

&lt;p&gt;服务器端发现客户端发送过来的Cookie后，会去检查究竟是从哪一个客户端发来的连接请求，然后对比服务器上的记录，最后得到之前的状态信息。&lt;/p&gt;

&lt;div class=&quot;rd&quot;&gt;
    &lt;img src=&quot;/assets/images/2017/10-11-12/10-30-11.png&quot; alt=&quot;&quot;&gt;
&lt;/div&gt;

&lt;div class=&quot;rd&quot;&gt;
    &lt;img src=&quot;/assets/images/2017/10-11-12/10-30-12.png&quot; alt=&quot;&quot;&gt;
&lt;/div&gt;

&lt;p&gt;HTTP请求报文和响应报文的内容&lt;/p&gt;

&lt;div class=&quot;rd&quot;&gt;
    &lt;img src=&quot;/assets/images/2017/10-11-12/10-30-13.png&quot; alt=&quot;&quot;&gt;
&lt;/div&gt;

&lt;h1 id=&quot;http&quot;&gt;HTTP工作原理&lt;/h1&gt;

&lt;p&gt;HTTP协议定义Web客户端如何从Web服务器请求Web页面，以及服务器如何把Web页面传送给客户端。&lt;br&gt;&lt;br&gt;
HTTP协议采用了请求/响应模型。客户端向服务器发送一个请求报文，请求报文包含请求的方法、URL、协议版本、请求头部和请求数据。&lt;br&gt;&lt;br&gt;
服务器以一个状态行作为响应，响应的内容包括协议的版本、成功或者错误代码、服务器信息、响应头部和响应数据。  &lt;/p&gt;

&lt;h1 id=&quot;http&quot;&gt;HTTP 请求/响应的步骤&lt;/h1&gt;

&lt;p&gt;实际的Web服务器会做什么&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;建立连接 - 接受一个客户端连接，或者不希望与这个客户端建立连接，就将其关闭。&lt;br&gt;&lt;/li&gt;
&lt;li&gt;接收请求 - 从网络中读取一HTTP请求报文。&lt;br&gt;&lt;/li&gt;
&lt;li&gt;处理请求 - 对请求报文进行解释，并采取行动。&lt;br&gt;&lt;/li&gt;
&lt;li&gt;访问资源 - 访问报文中所指的资源。&lt;br&gt;&lt;/li&gt;
&lt;li&gt;构建响应 - 创建带有正确首部的HTTP响应报文。&lt;br&gt;&lt;/li&gt;
&lt;li&gt;发送响应 - 将响应回送给客户端。&lt;br&gt;&lt;/li&gt;
&lt;li&gt;记录事务处理过程 - 将与已完成事务有关的内容记录在一个日志文件中。&lt;br&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;more&quot;&gt;更多-more&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://pengyouyi.site/assets/images/2017/pdf/HTTP.pdf&quot;&gt;图解HTTP-完整彩色版.pdf&lt;/a&gt;&lt;br&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
                <link>/http/2017/10/30/http-about</link>
                <guid>/http/2017/10/30/http-about</guid>
                <pubDate>Mon, 30 Oct 2017 00:00:00 +0800</pubDate>
        </item>

        <item>
                <title>URI和URL</title>
                <description>&lt;h1 id=&quot;uri-url-urn&quot;&gt;URI、URL、URN定义&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;URI（Uniform Resource Identifier）,统一资源标识符，用来唯一的标识一个资源。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;URL（Uniform Resource Locator）,统一资源定位符，表示资源的地点（互联网上所处的位置）&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;URN （Uniform Resource Name）统一资源名，作为特定内容的唯一名称使用的，与目前的资源所在地无关。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;uri-url-urn&quot;&gt;URI、URL、URN之间的关系&lt;/h1&gt;

&lt;p&gt;URI包含两种形式，URL和URN；&lt;/p&gt;

&lt;p&gt;URL是URI的子集&lt;/p&gt;

&lt;h1 id=&quot;uri&quot;&gt;URI例子&lt;/h1&gt;

&lt;div class=&quot;rd&quot;&gt;
    &lt;img src=&quot;/assets/images/2017/10-11-12/10-30-2.png&quot; alt=&quot;&quot;&gt;
&lt;/div&gt;

&lt;div class=&quot;rd&quot;&gt;
    &lt;img src=&quot;/assets/images/2017/10-11-12/10-30-1.png&quot; alt=&quot;&quot;&gt;
&lt;/div&gt;

&lt;h1 id=&quot;url&quot;&gt;URL格式&lt;/h1&gt;

&lt;div class=&quot;rd&quot;&gt;
    &lt;img src=&quot;/assets/images/2017/10-11-12/10-30-3.png&quot; alt=&quot;&quot;&gt;
&lt;/div&gt;

&lt;p&gt;URL 最重要的3个部分是：方案（scheme）、主机（host）、路径（path）&lt;/p&gt;

&lt;p&gt;通用URL组件&lt;/p&gt;

&lt;div class=&quot;rd&quot;&gt;
    &lt;img src=&quot;/assets/images/2017/10-11-12/10-30-4.png&quot; alt=&quot;&quot;&gt;
&lt;/div&gt;

&lt;h1 id=&quot;scheme&quot;&gt;协议、方案（scheme）&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;http，超文本传输协议方案&lt;br&gt;&lt;/li&gt;
&lt;li&gt;https，使用网景的SSL，SSL为HTTP连接提供了端到端的加密机制&lt;br&gt;&lt;/li&gt;
&lt;li&gt;mailto, 指向E-mail地址&lt;br&gt;&lt;/li&gt;
&lt;li&gt;ftp，从FTP服务器上下载或上载文件，并获取服务器上的目录结构内容列表&lt;br&gt;&lt;/li&gt;
&lt;li&gt;file，一台指定主机上课直接访问的文件&lt;br&gt;&lt;/li&gt;
&lt;li&gt;rtsp、respu，rtsp通过实时流传输协议解析的音频、视频媒体资源的标识符&lt;br&gt;&lt;/li&gt;
&lt;li&gt;news，访问一些特定的文章或新闻组&lt;br&gt;&lt;/li&gt;
&lt;li&gt;telnet，访问交互式业务&lt;br&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
                <link>/http/2017/10/30/http-URI-URL</link>
                <guid>/http/2017/10/30/http-URI-URL</guid>
                <pubDate>Mon, 30 Oct 2017 00:00:00 +0800</pubDate>
        </item>

        <item>
                <title>网络基础TCP/IP</title>
                <description>&lt;h1 id=&quot;tcp-ip&quot;&gt;网络基础TCP/IP&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;HTTP和TCP/IP协议族的关系:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;通常使用的网络(包括互联网)是在TCP/IP协议族的基础上运作的。HTTP属于它内部的一个子集&lt;/p&gt;

&lt;h2 id=&quot;tcp-ip&quot;&gt;TCP/IP协议族&lt;/h2&gt;

&lt;p&gt;计算机与网络设备要相互通信，双方就必须基于相同的方法。&lt;br&gt;&lt;br&gt;
比如，如何探测到通信目标、由哪一边先发起通信、使用哪种语言进行通信、怎样结束通信等规则都需要事先确定。&lt;br&gt;&lt;br&gt;
不同的硬件、操作系统之间的通信，所有一切都需要一种规则。&lt;br&gt;&lt;br&gt;
而我们把这种规则称为&lt;code&gt;协议&lt;/code&gt;(protocol)。  &lt;/p&gt;

&lt;div class=&quot;rd&quot;&gt;
    &lt;img src=&quot;/assets/images/2017/10-11-12/10-28-1.png&quot; alt=&quot;&quot;&gt;
&lt;/div&gt;

&lt;p&gt;协议中存在各式各样的内容。从电缆的规格到IP地址的选定方法、寻找异地用户的方法、双方建立通信的顺序，以及Web页面显示需要处理的步骤等等。&lt;/p&gt;

&lt;p&gt;像这样把与互联网相关的协议集合起来总称为&lt;code&gt;TCP/IP&lt;/code&gt;。&lt;/p&gt;

&lt;h2 id=&quot;tcp-ip&quot;&gt;TCP/IP分层&lt;/h2&gt;

&lt;p&gt;TCP/IP协议层分为4层：应用层、传输层、网络层、数据链路层。&lt;/p&gt;

&lt;div class=&quot;rd&quot;&gt;
    &lt;img src=&quot;/assets/images/2017/10-11-12/10-28-2.png&quot; alt=&quot;&quot;&gt;
&lt;/div&gt;

&lt;h3 id=&quot;1-application-layer&quot;&gt;1. 应用层-application layer&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;应用层决定了向用户提供应用服务时通信的活动。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;TCP/IP协议族内预存了各类通用的应用服务,包括：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;FTP (File Transfer Protocol) 文件传输协议&lt;/li&gt;
&lt;li&gt;DNS (Domain Name System) 域名系统服务&lt;/li&gt;
&lt;li&gt;HTTP 协议&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;hr&gt;&lt;/p&gt;

&lt;h3 id=&quot;2-transport-layer&quot;&gt;2. 传输层-transport layer&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;传输层提供处于网络连接中的两台计算机之间的数据传输。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;传输层上两个性质不同的协议&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;TCP (Transmission Control Protocol)，传输控制协议&lt;/li&gt;
&lt;li&gt;UDP (User Data Protocol)，用户数据报协议&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;hr&gt;&lt;/p&gt;

&lt;h3 id=&quot;3-network-layer&quot;&gt;3. 网络层（又名网络互联层）- Network layer&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;网络层用来处理网络上流动的数据包。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;数据包是网络传输的最小数据单位。&lt;br&gt;&lt;br&gt;
该层规定了通过怎样的路径（传输路径）到达对方计算机，并把数据包送给对方。&lt;/p&gt;

&lt;p&gt;&lt;hr&gt;&lt;/p&gt;

&lt;h3 id=&quot;4-link-layer&quot;&gt;4. 链路层（数据链路层，网络接口层）- link layer&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;链路层用来处理连接网络的硬件部分。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;包括控制操作系统、硬件的设备驱动、NIC（Network Interface Card，网卡）、光纤，以及连接器等一切传输媒介。&lt;/p&gt;

&lt;p&gt;&lt;hr&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;TCP/IP层次化的好处：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;改变只需把变动的层替换掉，不用整个替换；设计也变简单了。&lt;/p&gt;

&lt;h2 id=&quot;tcp-ip&quot;&gt;TCP/IP通信传输流&lt;/h2&gt;

&lt;div class=&quot;rd&quot;&gt;
    &lt;img src=&quot;/assets/images/2017/10-11-12/10-28-3.png&quot; alt=&quot;&quot;&gt;
&lt;/div&gt;

&lt;h1 id=&quot;http-ip-tcp-dns&quot;&gt;与HTTP关系密切的协议：IP、TCP、DNS&lt;/h1&gt;

&lt;h2 id=&quot;ip&quot;&gt;负责传输的IP协议&lt;/h2&gt;

&lt;p&gt;IP（Internet Protocol）国际协议位于网络层。&lt;/p&gt;

&lt;p&gt;区别“IP”和“IP地址”：“IP”其实是一种协议的名称。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;IP协议的作用就是把各种数据包传送给对方。&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;IP地址指明了节点被分配到的地址，IP地址可变换&lt;br&gt;&lt;/li&gt;
&lt;li&gt;MAC地址(Media Access Control Address)是指网卡所属的固定地址，MAC地址基本不会更改&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;使用ARP协议凭借MAC地址通信&lt;/p&gt;

&lt;p&gt;ARP（Address Resolution Protocol）是一种用来解析地址的协议，根据通信方的IP地址就可以反查出对应的MAC地址。&lt;/p&gt;

&lt;div class=&quot;rd&quot;&gt;
    &lt;img src=&quot;/assets/images/2017/10-11-12/10-28-4.png&quot; alt=&quot;&quot;&gt;
&lt;/div&gt;

&lt;h2 id=&quot;tcp&quot;&gt;确保可靠性的TCP协议&lt;/h2&gt;

&lt;p&gt;TCP位于传输层，提供可靠的字节流服务。&lt;/p&gt;

&lt;p&gt;字节流服务（Byte Stream Service）是指，为了方便传输，将大块数据分隔成以报文段(segment)为单位的数据包进行管理。&lt;br&gt;
可靠的传输服务是指，能够把数据准确可靠地传给对方。&lt;/p&gt;

&lt;p&gt;TCP协议为了更容易传送大数据才把数据分隔，而TCP协议能够确认数据最终是否送达到对方。&lt;/p&gt;

&lt;h3 id=&quot;tcp&quot;&gt;TCP三次握手&lt;/h3&gt;

&lt;p&gt;为了准确无误的将数据送达目标处，TCP协议采用了&lt;code&gt;三次握手策略&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;用TCP协议把数据包送出去后，TCP不会对传送后的情况置之不理，它会向对方确认是否成功送达。&lt;/p&gt;

&lt;p&gt;握手过程中使用了TCP的标志(flag) - SYN(synchronize) 和 ACK(acknowledgement)。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;发送端首先发送一个带SYN标志的数据包给对方。&lt;br&gt;&lt;/li&gt;
&lt;li&gt;接收端收到后，回传一个带SYN/ACK 标志的数据包以表示传达确认信息。&lt;br&gt;&lt;/li&gt;
&lt;li&gt;最后，发送端再回传一个带ACK标志的数据包，代表“握手”结束。&lt;br&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;rd&quot;&gt;
    &lt;img src=&quot;/assets/images/2017/10-11-12/10-28-5.png&quot; alt=&quot;&quot;&gt;
&lt;/div&gt;

&lt;p&gt;TCP为HTTP提供了一条&lt;code&gt;可靠的比特传输管道&lt;/code&gt;,TCP会按顺序、无差错的传递数据&lt;/p&gt;

&lt;h2 id=&quot;dns&quot;&gt;负责域名解析的DNS服务&lt;/h2&gt;

&lt;p&gt;DNS(Domain Name System)服务是和HTTP协议一样位于应用层的协议。&lt;/p&gt;

&lt;p&gt;DNS协议提供通过域名查找IP地址，或逆向从IP地址反查域名的服务&lt;/p&gt;

&lt;div class=&quot;rd&quot;&gt;
    &lt;img src=&quot;/assets/images/2017/10-11-12/10-28-6.png&quot; alt=&quot;&quot;&gt;
&lt;/div&gt;

&lt;h1 id=&quot;ip&quot;&gt;连接、IP地址及端口号&lt;/h1&gt;

&lt;div class=&quot;rd&quot;&gt;
    &lt;img src=&quot;/assets/images/2017/10-11-12/10-28-7.png&quot; alt=&quot;&quot;&gt;
&lt;/div&gt;

&lt;p&gt;Web浏览器通过TCP连接与Web服务器进行交互的步骤&lt;/p&gt;

&lt;h1 id=&quot;http&quot;&gt;各种协议与HTTP协议的关系&lt;/h1&gt;

&lt;div class=&quot;rd&quot;&gt;
    &lt;img src=&quot;/assets/images/2017/10-11-12/10-28-8.png&quot; alt=&quot;&quot;&gt;
&lt;/div&gt;
</description>
                <link>/http/2017/10/28/http-tcp-ip</link>
                <guid>/http/2017/10/28/http-tcp-ip</guid>
                <pubDate>Sat, 28 Oct 2017 00:00:00 +0800</pubDate>
        </item>

        <item>
                <title>HTTP持久连接、管线化</title>
                <description>&lt;h1 id=&quot;http&quot;&gt;HTTP连接性能&lt;/h1&gt;

&lt;h2 id=&quot;http&quot;&gt;HTTP事务的时延&lt;/h2&gt;

&lt;div class=&quot;rd&quot;&gt;
    &lt;img src=&quot;/assets/images/2017/10-11-12/10-28-9.png&quot; alt=&quot;&quot;&gt;
&lt;/div&gt;

&lt;h2 id=&quot;tcp&quot;&gt;TCP连接的握手时延&lt;/h2&gt;

&lt;div class=&quot;rd&quot;&gt;
    &lt;img src=&quot;/assets/images/2017/10-11-12/10-28-9.png&quot; alt=&quot;&quot;&gt;
&lt;/div&gt;

&lt;p&gt;在发送数据之前，TCP要传送两个分组来建立连接&lt;/p&gt;

&lt;h2 id=&quot;http&quot;&gt;HTTP串行事务处理时延&lt;/h2&gt;

&lt;div class=&quot;rd&quot;&gt;
    &lt;img src=&quot;/assets/images/2017/10-11-12/10-28-11.png&quot; alt=&quot;&quot;&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;提高HTTP的连接性能&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;并行连接。 通过多TCP连接发起并发的HTTP请求。&lt;br&gt;&lt;/li&gt;
&lt;li&gt;持久连接。 重用TCP连接，以消除连接及关闭时延。&lt;br&gt;&lt;/li&gt;
&lt;li&gt;管道化连接。通过共享的TCP连接发起并发的HTTP请求。&lt;br&gt;&lt;/li&gt;
&lt;li&gt;复用的连接。 交替传送请求和响应（实验阶段）。&lt;br&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;&gt;并行连接&lt;/h1&gt;

&lt;p&gt;并行连接可能会提高页面的加载速度&lt;/p&gt;

&lt;p&gt;但由于客户端的网络宽带不足，并行连接不一定总是更快。&lt;/p&gt;

&lt;p&gt;浏览器使用了并行连接，并行连接的总数通常是4个。服务器可以随意关闭来自特定客户端的超量连接。&lt;/p&gt;

&lt;h1 id=&quot;http-1-1&quot;&gt;HTTP/1.1持久连接&lt;/h1&gt;

&lt;p&gt;在事务处理结束之后仍然保持在打开状态的TCP连接被称为&lt;code&gt;持久连接&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;非持久连接会在每个事务结束之后关闭。持久连接会在不同事务之间保持打开状态，直到客户端或服务器决定将其关闭为止。&lt;/p&gt;

&lt;p&gt;HTTP协议采用“请求 - 应答”模式，当使用普通模式，即非Keep-Alive模式时，每个请求/应答客户和服务器都要新建一个连接，完成之后立即断开连接（HTTP协议为无连接的协议）&lt;/p&gt;

&lt;p&gt;当使用Keep - Alive模式（又称为持久连接、连接重用）时，Keep - Alive功能使客户端到服务器端的连接持续有效，当出现对服务器的后续请求时，Keep - Alive功能避免了建立或者重新建立连接&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;Connection: Keep-Alive
Keep-Alive: max &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 5, timeout &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 120&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;以上说明服务器最多还会为另外5个事务保持持久的打开状态，或者将打开状态保持到连接空闲了2分钟之后。&lt;/p&gt;

&lt;div class=&quot;rd&quot;&gt;
    &lt;img src=&quot;/assets/images/2017/10-11-12/10-28-12.png&quot; alt=&quot;&quot;&gt;
&lt;/div&gt;

&lt;h2 id=&quot;connection&quot;&gt;Connection首部和哑代理&lt;/h2&gt;

&lt;div class=&quot;rd&quot;&gt;
    &lt;img src=&quot;/assets/images/2017/10-11-12/10-28-13.png&quot; alt=&quot;&quot;&gt;
&lt;/div&gt;

&lt;div class=&quot;rd&quot;&gt;
    &lt;img src=&quot;/assets/images/2017/10-11-12/10-28-14.png&quot; alt=&quot;&quot;&gt;
&lt;/div&gt;

&lt;p&gt;现代的代理不能转发Connection首部和所有名字出现在Connection值中的首部。&lt;/p&gt;

&lt;p&gt;使用Proxy-Connection能解决客户端和服务器之间只有一个代理时的哑代理问题。&lt;/p&gt;

&lt;div class=&quot;rd&quot;&gt;
    &lt;img src=&quot;/assets/images/2017/10-11-12/10-28-15.png&quot; alt=&quot;&quot;&gt;
&lt;/div&gt;

&lt;p&gt;浏览器发送Proxy-Connection。如果遇到聪明的代理（理解持久连接），它会用Connection取代Proxy-Connection，再发送给服务器&lt;/p&gt;

&lt;p&gt;如果有多层代理，Proxy-Connection仍然无法解决问题。&lt;/p&gt;

&lt;div class=&quot;rd&quot;&gt;
    &lt;img src=&quot;/assets/images/2017/10-11-12/10-28-16.png&quot; alt=&quot;&quot;&gt;
&lt;/div&gt;

&lt;h2 id=&quot;http-1-0-http-1-1&quot;&gt;HTTP/1.0和HTTP/1.1持久协议区别&lt;/h2&gt;

&lt;p&gt;HTTP/1.0中默认是关闭持久连接的,通过发送Connection: Keep-Alive请求首部来激活Keep-Alive连接。&lt;/p&gt;

&lt;p&gt;早期HTTP/1.0使用Keep - Alive连接达到持久连接效果。Keep - Alive连接是可选或者不支持的。&lt;/p&gt;

&lt;p&gt;持久连接(persistent connection)是HTTP/1.1才出现的，HTTP/1.1所有的连接默认都是持久连接。连接关闭必须添加Connection: close首部。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;启用Keep-Alive的优点&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;启用Keep-Alive模式肯定更高效，性能更高。因为避免了建立/释放连接的开销。&lt;/p&gt;

&lt;p&gt;单用户客户端与任何服务器或代理之间的连接数不应该超过2个。一个代理与其它服务器或代码之间应该使用不超过2 * N的活跃并发连接。这是为了提高HTTP响应时间，避免拥塞（冗余的连接并不能代码执行性能的提升）。&lt;/p&gt;

&lt;h1 id=&quot;http&quot;&gt;HTTP管线化连接&lt;/h1&gt;

&lt;p&gt;在使用持久连接的情况下，某个连接上消息的传递类似于&lt;/p&gt;

&lt;p&gt;请求1 -&amp;gt; 响应1 -&amp;gt; 请求12 -&amp;gt; 响应2 -&amp;gt; 请求3 -&amp;gt; 响应3&lt;/p&gt;

&lt;p&gt;管线化连接，某个连接上的消息变成了类似这样&lt;/p&gt;

&lt;p&gt;请求1 -&amp;gt; 请求2 -&amp;gt; 请求3 -&amp;gt; 响应1  -&amp;gt; 响应2 -&amp;gt; 响应3&lt;/p&gt;

&lt;div class=&quot;rd&quot;&gt;
    &lt;img src=&quot;/assets/images/2017/10-11-12/10-28-17.png&quot; alt=&quot;&quot;&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;HTTP管线化连接限制&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;管线化机制通过持久连接完成，仅HTTP/1.1支持此技术&lt;br&gt;&lt;/li&gt;
&lt;li&gt;只有GET和HEAD请求可以进行管线化，而POST则有所限制&lt;br&gt;&lt;/li&gt;
&lt;li&gt;初次建立连接时不应启动管线机制，因为对方（服务器）不一定支持HTTP/1.1版本的协议&lt;br&gt;&lt;/li&gt;
&lt;li&gt;管线化不会影响响应到来的顺序，如上面的例子所示，响应返回的顺序未改变&lt;br&gt;&lt;/li&gt;
&lt;li&gt;HTTP/1.1要求服务器支持管线化，但并不要求服务器端也对响应进行管线化处理，只是要求对于管线化的请求不失败即可&lt;br&gt;&lt;/li&gt;
&lt;li&gt;由于上面提到的服务器端问题，开启管线化很可能并不会带来大幅度的性能提升，而且很多服务器端和代理程序对管线化的支持并不好，因此现代浏览器chrome和Firefox默认并未开启管线化支持&lt;br&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;close&quot;&gt;关闭连接-close&lt;/h1&gt;

&lt;p&gt;所有HTTP客户端、服务器或代理都可以在任意时刻关闭一TCP传输连接。通常在一条报文结束时关闭，也有出错的时候。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;如何确定传输的实体大小？&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;当服务器知道消息的长度时，使用消息首部字段Conent-Length&lt;br&gt;&lt;/li&gt;
&lt;li&gt;当服务器不知道内容的大小时，使用消息首部字段Transfer-Encoding&lt;br&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Transfer-Encoding 与 Conent-Length 不共存，Transfer-Encoding 优先级高于 Conent-Length&lt;/p&gt;

&lt;h1 id=&quot;more&quot;&gt;更多-more&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://www.kafan.cn/edu/5110681.html&quot;&gt;https://www.kafan.cn/edu/5110681.html&lt;/a&gt;&lt;/p&gt;
</description>
                <link>/http/2017/10/28/http-keep-alive</link>
                <guid>/http/2017/10/28/http-keep-alive</guid>
                <pubDate>Sat, 28 Oct 2017 00:00:00 +0800</pubDate>
        </item>

        <item>
                <title>HTTP报文常用请求头和响应头</title>
                <description>&lt;h1 id=&quot;http&quot;&gt;HTTP报文常用请求头&lt;/h1&gt;

&lt;p&gt;Accept：告诉服务器，客户端支持的数据类型。&lt;/p&gt;

&lt;p&gt;Accept-Charset：告诉服务器，客户端采用的编码。&lt;/p&gt;

&lt;p&gt;Accept-Encoding：告诉服务器，客户端支持的数据压缩格式。&lt;/p&gt;

&lt;p&gt;Accept-Language：告诉服务器，客户端的自然语言环境。&lt;/p&gt;

&lt;p&gt;Host：【HTTP1.1规定“必须”】告诉服务器，客户端想访问的主机名。&lt;/p&gt;

&lt;p&gt;If-Modified-Since：客户端询问服务器，在某个时间点之后修改了没。&lt;/p&gt;

&lt;p&gt;Referer：告诉服务器，客户端是从哪个资源来访问服务器的。（一般用于防盗链）&lt;/p&gt;

&lt;p&gt;User-Agent：客户端的软件环境。&lt;/p&gt;

&lt;p&gt;Cookie：告诉服务器，可以向服务器带数据。&lt;/p&gt;

&lt;p&gt;Connection：告诉服务器，请求完后是关闭还是保持链接。&lt;/p&gt;

&lt;p&gt;Date：客户端当前请求时间。&lt;/p&gt;

&lt;p&gt;Origin：标识跨域资源请求（请求服务端设置Access-Control-Allow-Origin响应字段）&lt;/p&gt;

&lt;h1 id=&quot;http&quot;&gt;HTTP报文常用响应头&lt;/h1&gt;

&lt;p&gt;Access-Control-Allow-Origin： 指定哪些站点可以参与跨站资源共享&lt;/p&gt;

&lt;p&gt;Location：这个头配合302状态码使用，重定向中或者创建新资源时使用。&lt;/p&gt;

&lt;p&gt;Server：服务器的类型。&lt;/p&gt;

&lt;p&gt;Content-Encoding： 数据采用的压缩格式，告诉浏览器采用哪种方式解码。&lt;/p&gt;

&lt;p&gt;Content-Length：返回的数据的长度。&lt;/p&gt;

&lt;p&gt;Content-Language：告诉客户端，理解哪种自然语言。&lt;/p&gt;

&lt;p&gt;Content-Type：返回主体数据的类型&lt;/p&gt;

&lt;p&gt;Last-Modified：告诉浏览器当前资源的最后缓存时间。&lt;/p&gt;

&lt;p&gt;Refresh：告诉浏览器隔多长时间刷新一次。&lt;/p&gt;

&lt;p&gt;Content-Disposition：告诉浏览器以下载的方式打开数据。&lt;/p&gt;

&lt;p&gt;Transfer-Encoding：告诉浏览器数据的传送格式，比如分块方式。&lt;/p&gt;

&lt;p&gt;Connection：告诉浏览器，响应完是保持链接还是关闭链接。&lt;/p&gt;

&lt;p&gt;Date：告诉客户端，返回响应的时间。&lt;/p&gt;

&lt;p&gt;ETag：与缓存相关的头。&lt;/p&gt;

&lt;p&gt;以下三个表示服务器通过这个头告诉浏览器不要缓存&lt;/p&gt;

&lt;p&gt;expires：-1&lt;/p&gt;

&lt;p&gt;cache-control：no-cache&lt;/p&gt;

&lt;p&gt;pragma：no-cache&lt;/p&gt;

&lt;h1 id=&quot;more&quot;&gt;更多-more&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://tools.jb51.net/table/http_header&quot;&gt;http://tools.jb51.net/table/http_header&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.jianshu.com/c/47c604fe47af&quot;&gt;http://www.jianshu.com/c/47c604fe47af&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.jianshu.com/p/d40facd78a88&quot;&gt;http://www.jianshu.com/p/d40facd78a88&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
                <link>/http/2017/10/28/http-header-Request-Response</link>
                <guid>/http/2017/10/28/http-header-Request-Response</guid>
                <pubDate>Sat, 28 Oct 2017 00:00:00 +0800</pubDate>
        </item>

        <item>
                <title>HTTP媒体类型</title>
                <description>&lt;h1 id=&quot;http&quot;&gt;HTTP媒体类型&lt;/h1&gt;

&lt;p&gt;因特网上有数千种不同的数据类型，HTTP仔细地给每种要通过Web传输的对象都打上名为MIME类型（MIME type） 的数据格式标签。 最初设计MIM（Multipurpose Internet Mail Extension，多用途因特网邮件扩展）是为了解决在不同的电子邮件系统之间搬移报文时存在的问题。MIME 在电子邮件系统中工作得非常好，因此HTTP 也采纳了它，用它来描述并标记多媒体内容。&lt;/p&gt;

&lt;p&gt;Web服务器会为所有HTTP对象数据附加一个MIME类型。 当Web浏览器从服务器中取回一个对象时，会去查看相关的MIME 类型，看看它是否知道应该如何处理这个对象。&lt;/p&gt;

&lt;p&gt;大多数浏览器都可以处理数百种常见的对象类型：显示图片文件、解析并格式化HTML 文件、通过计算机声卡播放音频文件，或者运行外部 插件软件来处理特殊格式的数据。&lt;/p&gt;

&lt;p&gt;MIME 类型是一种文本标记，表示一种主要的对象类型和一个特定的子类型，中间由一条斜杠来分隔。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;文本文件&lt;br&gt;&lt;br&gt;
text/html，text/plain，text/css...&lt;br&gt;
application/xhtml+xml，application/xml...&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;图片文件&lt;br&gt;&lt;br&gt;
image/jpeg，image/gif，image/png...&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;视频文件&lt;br&gt;&lt;br&gt;
video/mpeg，video/quicktime&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;应用程序使用的二进制文件&lt;br&gt;&lt;br&gt;
application/zip，application/application/vnd.ms-powerpoint...&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;accept&quot;&gt;Accept&lt;/h1&gt;

&lt;p&gt;Accept首部字段可通知服务器，用户代理&lt;code&gt;能够处理的媒体类型&lt;/code&gt;及&lt;code&gt;媒体类型的相对优先级&lt;/code&gt;。&lt;/p&gt;

&lt;div class=&quot;rd&quot;&gt;
    &lt;img src=&quot;/assets/images/2017/10-11-12/10-28-18.png&quot; alt=&quot;&quot;&gt;
&lt;/div&gt;

&lt;p&gt;可使用type/subtype这种形式，一次指定多种媒体类型。&lt;/p&gt;

&lt;p&gt;若想要给显示的媒体类型增加优先级，则使用q=来额外表示权重值，用分号（；）进行分隔。权重值q的范围是0~1。默认权重为q=1.0。&lt;/p&gt;

&lt;p&gt;当服务器提供多种内容时，将会首先返回权重值最高的媒体类型。&lt;/p&gt;

&lt;h1 id=&quot;more&quot;&gt;更多-more&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.iana.org/assignments/media-types/media-types.xhtml&quot;&gt;http://www.iana.org/assignments/media-types/media-types.xhtml&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://tool.oschina.net/commons&quot;&gt;http://tool.oschina.net/commons&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.w3school.com.cn/media/media_mimeref.asp&quot;&gt;http://www.w3school.com.cn/media/media_mimeref.asp&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
                <link>/http/2017/10/28/http-MIME</link>
                <guid>/http/2017/10/28/http-MIME</guid>
                <pubDate>Sat, 28 Oct 2017 00:00:00 +0800</pubDate>
        </item>

        <item>
                <title>HTTP报文-首部分类</title>
                <description>&lt;h1 id=&quot;http&quot;&gt;HTTP报文-首部&lt;/h1&gt;

&lt;p&gt;HTTP首部字段想请求和响应报文中添加了一些附加信息。&lt;br&gt;&lt;br&gt;
本质上来说，他们只是一些名/值对的列表。&lt;/p&gt;

&lt;p&gt;请求报文和响应报文的结构&lt;/p&gt;

&lt;div class=&quot;rd&quot;&gt;
    &lt;img src=&quot;/assets/images/2017/10-11-12/10-27-1.png&quot; alt=&quot;&quot;&gt;
&lt;/div&gt;

&lt;p&gt;请求报文和响应报文的实例&lt;/p&gt;

&lt;div class=&quot;rd&quot;&gt;
    &lt;img src=&quot;/assets/images/2017/10-11-12/10-27-2.png&quot; alt=&quot;&quot;&gt;
&lt;/div&gt;

&lt;div class=&quot;rd&quot;&gt;
    &lt;img src=&quot;/assets/images/2017/10-11-12/10-27-3.png&quot; alt=&quot;&quot;&gt;
&lt;/div&gt;

&lt;h1 id=&quot;http&quot;&gt;HTTP报文-首部分类&lt;/h1&gt;

&lt;p&gt;HTTP首部可以分为以下5类&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. 通用首部&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
 既可用于请求，也可用于响应。可以在客户端、服务器和其他应用程序之间提供通用功能。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. 请求首部&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
 是请求报文特有的。补充了请求的附加内容、客户端信息、响应内容相关优先级等信息。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. 响应首部&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
 是响应报文特有的。为客户端提供信息，补充响应的附加内容，也会要求客户端附加额外的内容信息。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4. 实体首部&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
针对请求报文和响应报文的实体部分使用的首部。描述实体的长度和内容，或者更新时间。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5. 扩展首部&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
 非标准HTTP规范，由程序开发者创建&lt;/p&gt;

&lt;h1 id=&quot;general-header&quot;&gt;通用首部(General-Header)&lt;/h1&gt;

&lt;h2 id=&quot;general&quot;&gt;通用性息信首部-General&lt;/h2&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;首部&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;th&gt;示例&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Connection&lt;/td&gt;
&lt;td&gt;表示是否需要持久连接。（HTTP 1.1默认进行持久连接）&lt;/td&gt;
&lt;td&gt;Connection: close&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Date&lt;/td&gt;
&lt;td&gt;报文创建的日期和时间，响应必须给出，缓存评估新鲜度&lt;/td&gt;
&lt;td&gt;Date: Tue, 15 Nov 2010 08:12:31 GMT&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Trailer&lt;/td&gt;
&lt;td&gt;如果报文采用了分块传输编码方式，就可以使用这个首部列出位于报文拖挂(Trailer)部分的首部集合&lt;/td&gt;
&lt;td&gt;Trailer: Content-Length&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Upgrade&lt;/td&gt;
&lt;td&gt;发送端想”升级“，向服务器指定某种传输协议以便服务器进行转换（如果支持），服务端回应101响应时，必须包含这个首部&lt;/td&gt;
&lt;td&gt;Upgrade: HTTP/2.0, SHTTP/1.3, IRC/6.9, RTA/x11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Via&lt;/td&gt;
&lt;td&gt;显示报文经过的中间节点(代理、网关)&lt;/td&gt;
&lt;td&gt;Via: 1.0 fred, 1.1 nowhere.com (Apache/1.1)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;MIME-Version&lt;/td&gt;
&lt;td&gt;发送端使用的MIME版本&lt;/td&gt;
&lt;td&gt;MIME-Version: 1.0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Transfer-Encoding&lt;/td&gt;
&lt;td&gt;告知接收方对其采用了何种传输编码方式&lt;/td&gt;
&lt;td&gt;Transfer-Encoding:chunked&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;h2 id=&quot;universal-cache&quot;&gt;通用缓存首部-Universal cache&lt;/h2&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;首部&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;th&gt;示例&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Cache-Control&lt;/td&gt;
&lt;td&gt;【HTTP/1.1】指定请求和响应遵循的缓存机制&lt;/td&gt;
&lt;td&gt;Cache-Control: no-cache&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Pragma&lt;/td&gt;
&lt;td&gt;随报文传送一些指令。通常来控制缓存。迫使浏览器重新加载或刷新时，即使缓存新鲜也要请求服务器&lt;/td&gt;
&lt;td&gt;Pragma: no-cache&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;h1 id=&quot;request-header&quot;&gt;请求首部(request header)&lt;/h1&gt;

&lt;p&gt;请求首部说明是谁或什么在发送请求、请求源自何处，或者客户端的喜好及能力。&lt;/p&gt;

&lt;p&gt;服务器可以根据请求首部给出的客户端信息，试着为客户端提供更好的响应。&lt;/p&gt;

&lt;h2 id=&quot;informational&quot;&gt;请求的信息性首部-Informational&lt;/h2&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;首部&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;th&gt;示例&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;From&lt;/td&gt;
&lt;td&gt;发出请求的用户的Email&lt;/td&gt;
&lt;td&gt;From: &lt;a href=&quot;mailto:user@email.com&quot;&gt;user@email.com&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Host&lt;/td&gt;
&lt;td&gt;指定请求的服务器的域名和端口号，HTTP1.1规定客户端请求必须包含Host,否则它返回400 bad request&lt;/td&gt;
&lt;td&gt;Host: &lt;a href=&quot;http://www.zcmhi.com&quot;&gt;www.zcmhi.com&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Referer&lt;/td&gt;
&lt;td&gt;使服务器知道客户端从哪里获得其请求的URL；先前网页的地址，当前请求网页紧随其后,即来路&lt;/td&gt;
&lt;td&gt;Referer: &lt;a href=&quot;http://www.zcmhi.com/archives/71.html&quot;&gt;http://www.zcmhi.com/archives/71.html&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;User-Agent&lt;/td&gt;
&lt;td&gt;告诉服务器发出请求的客户端信息&lt;/td&gt;
&lt;td&gt;User-Agent: Mozilla/5.0 (Linux; X11)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;UA-(CPU,Disp,OS,Color,Pixels)&lt;/td&gt;
&lt;td&gt;不推荐使用，客户端机器的CPU、显示器的尺寸和色彩深度、操作系统、显示器的颜色信息、显示器的像素信息&lt;/td&gt;
&lt;td&gt;UA-OS: Windows 95&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;h2 id=&quot;accept&quot;&gt;Accept首部&lt;/h2&gt;

&lt;p&gt;Accept首部为客户端提供了一种将其喜好和能力告知服务器的方式，包括它们想要什么，可以使用什么，不想要什么。&lt;/p&gt;

&lt;p&gt;Accept首部使连接的两端受益：&lt;/p&gt;

&lt;p&gt;客户端会得到它们想要的内容，服务器则不会浪费其时间和带宽来发送客户端无法使用的东西。&lt;/p&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;首部&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;th&gt;示例&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Accept&lt;/td&gt;
&lt;td&gt;告诉服务器能够发送哪些媒体类型&lt;/td&gt;
&lt;td&gt;Accept: text/plain, text/html&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Accept-Charset&lt;/td&gt;
&lt;td&gt;客户端可以接受哪些字符集&lt;/td&gt;
&lt;td&gt;Accept-Charset: utf-8, gb2312&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Accept-Encoding&lt;/td&gt;
&lt;td&gt;客户端可以接受哪些编码方式&lt;/td&gt;
&lt;td&gt;Accept-Encoding: compress, gzip, deflate, identity(默认不压缩)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Accept-Language&lt;/td&gt;
&lt;td&gt;浏览器可以接受或优选哪种语言&lt;/td&gt;
&lt;td&gt;Accept-Language: en,zh&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;TE&lt;/td&gt;
&lt;td&gt;客户端愿意接受的传输编码，并通知服务器接受接受尾加头信息&lt;/td&gt;
&lt;td&gt;TE: trailers,deflate;q=0.5&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;h2 id=&quot;conditional&quot;&gt;条件请求首部-Conditional&lt;/h2&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;首部&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;th&gt;示例&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Expect&lt;/td&gt;
&lt;td&gt;客户端告诉服务器他们需要某种行为，服务器给出反馈【成功：100 Continue ；失败：417 Expectation Failed】&lt;/td&gt;
&lt;td&gt;Expect: 100-continue&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;If-Match&lt;/td&gt;
&lt;td&gt;只有请求内容与实体相匹配才有效，服务器对比If-Match首部的实体标记与当前的实体标记，匹配才返回对象&lt;/td&gt;
&lt;td&gt;If-Match: “737060cd8c284d8af7ad3082f209582d”&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;If-None-Match&lt;/td&gt;
&lt;td&gt;如果内容未改变返回304代码，参数为服务器先前发送的Etag，与服务器回应的Etag比较判断是否改变&lt;/td&gt;
&lt;td&gt;If-None-Match: “737060cd8c284d8af7ad3082f209582d”&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Range&lt;/td&gt;
&lt;td&gt;只请求实体的一部分，指定范围&lt;/td&gt;
&lt;td&gt;Range: bytes=500-999&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;If-Range&lt;/td&gt;
&lt;td&gt;客户端拥有某范围内资源的副本，它要对范围进行再验证。如果实体未改变，服务器发送客户端丢失的部分，否则发送整个实体。参数也为Etag或Date&lt;/td&gt;
&lt;td&gt;If-Range: “737060cd8c284d8af7ad3082f209582d”&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;If-Modified-Since&lt;/td&gt;
&lt;td&gt;如果请求的部分在指定时间之后被修改则请求成功，未被修改则返回304代码&lt;/td&gt;
&lt;td&gt;If-Modified-Since: Sat, 29 Oct 2010 19:43:31 GMT&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;If-Unmodified-Since&lt;/td&gt;
&lt;td&gt;只有实体在指定时间之后未被修改才请求成功&lt;/td&gt;
&lt;td&gt;If-Unmodified-Since: Sat, 29 Oct 2010 19:43:31 GMT&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;h2 id=&quot;security&quot;&gt;安全请求首部-Security&lt;/h2&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;首部&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;th&gt;示例&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Authorization&lt;/td&gt;
&lt;td&gt;向服务器(401)回应自己的身份验证信息，HTTP授权的授权证书&lt;/td&gt;
&lt;td&gt;Authorization: Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ==&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Cookie&lt;/td&gt;
&lt;td&gt;客户端识别和跟踪的扩展首部&lt;/td&gt;
&lt;td&gt;Cookie: Skin=new;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Cookie2&lt;/td&gt;
&lt;td&gt;识别请求发起者能够理解哪种类型的Cookie&lt;/td&gt;
&lt;td&gt;Cookie: $Version=1; Skin=new;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;h2 id=&quot;proxy&quot;&gt;代理请求首部-Proxy&lt;/h2&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;首部&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;th&gt;示例&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Max-Forwards&lt;/td&gt;
&lt;td&gt;指定请求所经过的代理或其他中间节点的最大数目。只能和TRACE方法一同使用&lt;/td&gt;
&lt;td&gt;Max-Forwards: 10&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Proxy-Authorization&lt;/td&gt;
&lt;td&gt;与代理进行认证时使用，响应Proxy-Authenticate质询&lt;/td&gt;
&lt;td&gt;Proxy-Authorization: Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ==&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Proxy-Connection&lt;/td&gt;
&lt;td&gt;客户端与代理之间建立连接使用。解决Connection被哑代理盲转发的问题&lt;/td&gt;
&lt;td&gt;Proxy-Connection: close&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;h1 id=&quot;response-header&quot;&gt;响应首部(Response header)&lt;/h1&gt;

&lt;h2 id=&quot;informative&quot;&gt;响应的信息性首部-Informative&lt;/h2&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;首部&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;th&gt;示例&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Age&lt;/td&gt;
&lt;td&gt;(从原始服务器创建开始)响应持续时间，响应是通过中间节点，很可能从代理的缓存传过来的&lt;/td&gt;
&lt;td&gt;Age: 12&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Retry-After&lt;/td&gt;
&lt;td&gt;如果资源不可用的话，告诉客户端什么时候(或多久之后)重新发送请求&lt;/td&gt;
&lt;td&gt;Retry-After: 120&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Server&lt;/td&gt;
&lt;td&gt;服务器标识自己，同User-Agent标识客户端一样&lt;/td&gt;
&lt;td&gt;Server: Apache/1.3.27 (Unix) (Red-Hat/Linux)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Warning&lt;/td&gt;
&lt;td&gt;警告实体可能存在的问题&lt;/td&gt;
&lt;td&gt;Warning: 199 Miscellaneous warning&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;h2 id=&quot;negotiation&quot;&gt;协商首部-Negotiation&lt;/h2&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;首部&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;th&gt;示例&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Accept-Ranges&lt;/td&gt;
&lt;td&gt;表明服务器是否接受请求资源的某个范围&lt;/td&gt;
&lt;td&gt;Accept-Ranges: bytes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Allow&lt;/td&gt;
&lt;td&gt;告诉客户端可以对特定资源使用哪些HTTP方法，发送405Method Not Allowed响应的HTTP/1.1服务器必须包含Allow首部&lt;/td&gt;
&lt;td&gt;Allow: GET, HEAD&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Location&lt;/td&gt;
&lt;td&gt;用来重定向接收方到非请求URL的位置来完成请求或标识新的资源&lt;/td&gt;
&lt;td&gt;Location: &lt;a href=&quot;http://www.zcmhi.com/archives/94.html&quot;&gt;http://www.zcmhi.com/archives/94.html&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Vary&lt;/td&gt;
&lt;td&gt;是一个首部列表，服务器查看其它首部的列表，根据首部的内容挑出最适合的版本发送给客户端&lt;/td&gt;
&lt;td&gt;Vary: User-Agent&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;h2 id=&quot;security&quot;&gt;安全响应首部-Security&lt;/h2&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;首部&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;th&gt;示例&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Proxy-Authenticate&lt;/td&gt;
&lt;td&gt;代理用这个首部来质询发送请求的应用程序，要求其对自身进行认证，HTTP/1.1代理服务器发送407Proxy Authentication Required响应，必须包含这个首部&lt;/td&gt;
&lt;td&gt;Proxy-Authenticate: Basic&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;WWW-Authenticate&lt;/td&gt;
&lt;td&gt;用于401Unauthorized 响应，向客户端发布一个质询认证方案，表明客户端请求实体应该使用的授权方案&lt;/td&gt;
&lt;td&gt;WWW-Authenticate: Basic&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Set-Cookie&lt;/td&gt;
&lt;td&gt;不是真正的安全首部，但隐含有安全功能；可以在客户端设置一个令牌，以便服务器对客户端进行标识&lt;/td&gt;
&lt;td&gt;Set-Cookie: UserID=JohnDoe;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Set-Cookie2&lt;/td&gt;
&lt;td&gt;是&lt;/td&gt;
&lt;td&gt;Set-Cookie的扩展&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;h1 id=&quot;entity-header&quot;&gt;实体首部(Entity header)&lt;/h1&gt;

&lt;h2 id=&quot;content&quot;&gt;内容首部-Content&lt;/h2&gt;

&lt;p&gt;内容首部说明了实体内容的类型、尺寸以及处理它所需的其他有用信息&lt;/p&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;首部&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;th&gt;示例&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Content-Type&lt;/td&gt;
&lt;td&gt;请求或返回主体的媒体类型&lt;/td&gt;
&lt;td&gt;Content-Type: text/html; charset=utf-8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Content-Length&lt;/td&gt;
&lt;td&gt;请求或响应主体的长度或尺寸，比如HEAD方法得到服务器给的header就有这个首部&lt;/td&gt;
&lt;td&gt;Content-Length: 348&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Content-Range&lt;/td&gt;
&lt;td&gt;在整个返回体中本部分的字节位置【206】&lt;/td&gt;
&lt;td&gt;Content-Range: bytes 21010-47021/47022&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Content-Encoding&lt;/td&gt;
&lt;td&gt;是否对某对象进行过编码。比如，服务器告诉客户端它对对象执行过哪种编码，客户端就可以对报文解码&lt;/td&gt;
&lt;td&gt;Content-Encoding: compress, gzip&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Content-Language&lt;/td&gt;
&lt;td&gt;告诉客户端，理解哪种自然语言&lt;/td&gt;
&lt;td&gt;Content-Language: en,zh&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Content-Base&lt;/td&gt;
&lt;td&gt;服务器为响应主体部分中要解析的URL指定一个基础URL&lt;/td&gt;
&lt;td&gt;Content-Base: &lt;a href=&quot;http://www.joes-hardware.com&quot;&gt;http://www.joes-hardware.com&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Content-Location&lt;/td&gt;
&lt;td&gt;服务器用它将客户端重定向到一个新URL&lt;/td&gt;
&lt;td&gt;Content-Location: &lt;a href=&quot;http://www.joes-hardware.com/index.htm&quot;&gt;http://www.joes-hardware.com/index.htm&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Content-MD5&lt;/td&gt;
&lt;td&gt;对报文主体进行校验&lt;/td&gt;
&lt;td&gt;Content-MD5: Q2hlY2sgSW50ZWdyaXR5IQ==&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;h2 id=&quot;entity-cache&quot;&gt;实体缓存首部-Entity cache&lt;/h2&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;首部&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;th&gt;示例&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;ETag&lt;/td&gt;
&lt;td&gt;实体标记，某个特定资源版本的标识符&lt;/td&gt;
&lt;td&gt;ETag: “737060cd8c284d8af7ad3082f209582d”&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Expires&lt;/td&gt;
&lt;td&gt;给出响应失效的日期和时间，客户端缓存副本，在有效期之前，不去访问服务器资源是否有效&lt;/td&gt;
&lt;td&gt;Expires: Thu, 01 Dec 2010 16:00:00 GMT&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Last-Modified&lt;/td&gt;
&lt;td&gt;服务器上的资源的最后修改时间或创建时间&lt;/td&gt;
&lt;td&gt;Last-Modified: Tue, 15 Nov 2010 12:45:26 GMT&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;h1 id=&quot;extension-header&quot;&gt;扩展首部(extension header)&lt;/h1&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;首部&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;th&gt;示例&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Cookie&lt;/td&gt;
&lt;td&gt;客户端识别和跟踪的扩展首部&lt;/td&gt;
&lt;td&gt;Cookie: Skin=new;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Cookie2&lt;/td&gt;
&lt;td&gt;识别请求发起者能够理解哪种类型的Cookie&lt;/td&gt;
&lt;td&gt;Cookie: $Version=1; Skin=new;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;MIME-Version&lt;/td&gt;
&lt;td&gt;发送端使用的MIME版本&lt;/td&gt;
&lt;td&gt;MIME-Version: 1.0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Set-Cookie&lt;/td&gt;
&lt;td&gt;不是真正的安全首部，但隐含有安全功能；可以在客户端设置一个令牌，以便服务器对客户端进行标识&lt;/td&gt;
&lt;td&gt;Set-Cookie: UserID=JohnDoe;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Set-Cookie2&lt;/td&gt;
&lt;td&gt;是&lt;/td&gt;
&lt;td&gt;Set-Cookie的扩展&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;UA-(CPU,Disp,OS,Color,Pixels)&lt;/td&gt;
&lt;td&gt;不推荐使用，客户端机器的CPU、显示器的尺寸和色彩深度、操作系统、显示器的颜色信息、显示器的像素信息&lt;/td&gt;
&lt;td&gt;UA-OS: Windows 95&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Content-Disposition&lt;/td&gt;
&lt;td&gt;告诉浏览器以下载的方式打开数据。&lt;/td&gt;
&lt;td&gt;？&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;X-Frame-Options&lt;/td&gt;
&lt;td&gt;HTTP响应首部，防止点击劫持攻击。&lt;/td&gt;
&lt;td&gt;X-Frame-Options: DENY、SAMEORIGIN（仅同源域名下的页面匹配许可）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;X-XSS-Protection&lt;/td&gt;
&lt;td&gt;HTTP响应首部，防止XSS攻击&lt;/td&gt;
&lt;td&gt;X-XSS-Protection: 0（过滤无效）、1（过滤有效）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;DNT&lt;/td&gt;
&lt;td&gt;HTTP请求首部，拒绝个人信息被收集&lt;/td&gt;
&lt;td&gt;DNT: 0(同意被追踪)、1(拒绝被追踪)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P3P&lt;/td&gt;
&lt;td&gt;HTTP响应首部，保护用户隐私&lt;/td&gt;
&lt;td&gt;？&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;h1 id=&quot;hop-by-hop-headers&quot;&gt;Hop-by-hop headers&lt;/h1&gt;

&lt;p&gt;HTTP首部字段根据代理怎么处理它们分为两类&lt;/p&gt;

&lt;h2 id=&quot;end-to-end-headers&quot;&gt;End-to-end headers&lt;/h2&gt;

&lt;p&gt;端到端首部&lt;/p&gt;

&lt;p&gt;分在此类别中的首部会转发给请求/响应的最终接收目标，且必须保存在由缓存生成的响应中，另外规定它必须被转发。&lt;/p&gt;

&lt;h2 id=&quot;hop-by-hop-headers&quot;&gt;Hop-by-hop headers&lt;/h2&gt;

&lt;p&gt;逐跳首部&lt;/p&gt;

&lt;p&gt;只对单次转发有效，会通过缓存或代理而不再转发。HTTP/1.1规定，使用Hop-by-hop 首部，需提供 Connection 首部字段。&lt;/p&gt;

&lt;p&gt;逐跳首部&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Connection&lt;br&gt;&lt;/li&gt;
&lt;li&gt;Keep-Alive&lt;br&gt;&lt;/li&gt;
&lt;li&gt;Proxy-Authenticate&lt;br&gt;&lt;/li&gt;
&lt;li&gt;Proxy-Authorization&lt;br&gt;&lt;/li&gt;
&lt;li&gt;TE&lt;br&gt;&lt;/li&gt;
&lt;li&gt;Trailer&lt;br&gt;&lt;/li&gt;
&lt;li&gt;Transfer-Encoding&lt;br&gt;&lt;/li&gt;
&lt;li&gt;Upgrade&lt;br&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;除了这8个首部字段之外，其他所有字段都属于端到端首部。&lt;/p&gt;

&lt;h1 id=&quot;more&quot;&gt;更多-more&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers&quot;&gt;https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers&lt;/a&gt;&lt;br&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://tools.jb51.net/table/http_header&quot;&gt;http://tools.jb51.net/table/http_header&lt;/a&gt;&lt;br&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.jianshu.com/c/47c604fe47af&quot;&gt;http://www.jianshu.com/c/47c604fe47af&lt;/a&gt;&lt;br&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.jianshu.com/p/d40facd78a88&quot;&gt;http://www.jianshu.com/p/d40facd78a88&lt;/a&gt;&lt;br&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://pengyouyi.site/assets/pdf/HTTP.pdf&quot;&gt;图解HTTP-完整彩色版.pdf&lt;/a&gt;&lt;br&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
                <link>/http/2017/10/27/http-header</link>
                <guid>/http/2017/10/27/http-header</guid>
                <pubDate>Fri, 27 Oct 2017 00:00:00 +0800</pubDate>
        </item>

        <item>
                <title>event事件对象的通用属性、方法</title>
                <description>&lt;h1 id=&quot;event&quot;&gt;event事件对象&lt;/h1&gt;

&lt;p&gt;在触发DOM上的某个事件时，会产生一个事件对象，这个对象中包含着所有与事件有关的信息。&lt;/p&gt;

&lt;p&gt;包括导致事件的元素、事件的类型以及其他与特定事件相关的信息。比如，&lt;/p&gt;

&lt;p&gt;鼠标操作导致的事件对象中，会包含鼠标位置的信息，&lt;br&gt;
键盘操作导致的事件对象中，会包含与按下的键有关的信息&lt;/p&gt;

&lt;p&gt;所有浏览器都支持event对象，但支持方式不同&lt;/p&gt;

&lt;h1 id=&quot;dom&quot;&gt;DOM中的事件对象&lt;/h1&gt;

&lt;h2 id=&quot;dom0-dom2-event&quot;&gt;DOM0级或者DOM2级事件处理程序中的event&lt;/h2&gt;

&lt;p&gt;事件处理程序（DOM0级或者DOM2级）时，浏览器都会将一个event对象传入&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;lang=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;en&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;charset=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;test&lt;span class=&quot;nt&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;myDiv&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;click me&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;   
&lt;span class=&quot;nt&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;btn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;myDiv&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;btn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onclick&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;btn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'click'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
   
   &lt;span class=&quot;nx&quot;&gt;btn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'click'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;myEvent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;myEvent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;myEvent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;     
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;result display&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;rd&quot;&gt;
    &lt;img src=&quot;/assets/images/2017/10-11-12/10-25-1.png&quot; alt=&quot;&quot;&gt;
&lt;/div&gt;

&lt;p&gt;点击btn,给它绑定的3个事件都执行了&lt;/p&gt;

&lt;p&gt;function(e) {} 里面传入的参数只有第一个有效，且无论参数名叫啥，它都代表event对象，所以通常给它传入 event 或者它的简写 e。&lt;/p&gt;

&lt;h2 id=&quot;html&quot;&gt;HTML事件处理程序中的事件对象&lt;/h2&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;lang=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;en&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;charset=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;test&lt;span class=&quot;nt&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;myDiv&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;onclick=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;console.log(event)&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;event&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;  

    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;myDiv&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;onclick=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;console.log(event.type)&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;event.type&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;myDiv&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;onclick=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;console.log(e)&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;e&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;                  
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;result display&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;rd&quot;&gt;
    &lt;img src=&quot;/assets/images/2017/10-11-12/10-25-2.png&quot; alt=&quot;&quot;&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code&gt;变量event中保存着event对象&lt;/code&gt;，&lt;br&gt;
其他变量，比如e，都会报错，因为未定义&lt;/p&gt;

&lt;h2 id=&quot;event&quot;&gt;event事件对象的常用属性、方法&lt;/h2&gt;

&lt;p&gt;event对象包含与创建它的特定事件有关的属性和方法。&lt;br&gt;
触发的事件类型（event.type）不一样，可用的属性和方法也不一样。&lt;/p&gt;

&lt;p&gt;不过，所有事件都会有下表列出的成员,以下读写权限都是&lt;strong&gt;只读&lt;/strong&gt;&lt;/p&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;属性/方法&lt;/th&gt;
&lt;th&gt;类型&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;type&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;String&lt;/td&gt;
&lt;td&gt;被触发的事件类型&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;target&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Element&lt;/td&gt;
&lt;td&gt;事件的目标&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;currentTarget&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Element&lt;/td&gt;
&lt;td&gt;其事件处理程序当前正在处理事件的那个元素&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;cancelable&lt;/td&gt;
&lt;td&gt;Boolean&lt;/td&gt;
&lt;td&gt;表明是否可以取消事件的默认行为&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;preventDefault()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Function&lt;/td&gt;
&lt;td&gt;&lt;code&gt;取消事件的默认行为&lt;/code&gt;。如果cancelable是true,则可以使用这个方法&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;defaultPrevented&lt;/td&gt;
&lt;td&gt;Boolean&lt;/td&gt;
&lt;td&gt;为true表示已经调用了preventDefault()【DOM3级事件中新增】&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;eventPhase&lt;/td&gt;
&lt;td&gt;Integer&lt;/td&gt;
&lt;td&gt;调用事件处理程序的阶段：1表示捕获阶段，2表示处于目标阶段，3表示冒泡阶段&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;bubbles&lt;/td&gt;
&lt;td&gt;Boolean&lt;/td&gt;
&lt;td&gt;表明事件是否冒泡&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;stopPropagation()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Function&lt;/td&gt;
&lt;td&gt;&lt;code&gt;取消事件的进一步捕获或冒泡&lt;/code&gt;。如果bubbles为true,则可以使用这个方法&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;stopImmediatePropagation()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Function&lt;/td&gt;
&lt;td&gt;取消事件的进一步捕获或冒泡。同时阻止任何事件(相同事件类型)处理程序被调用【DOM3级事件中新增】&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;trusted&lt;/td&gt;
&lt;td&gt;Boolean&lt;/td&gt;
&lt;td&gt;为true表示事件时浏览器生成的。为false表示事件是由开发人员通过JavaScript创建的【DOM3级事件中新增】&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;detail&lt;/td&gt;
&lt;td&gt;Integer&lt;/td&gt;
&lt;td&gt;与事件相关的细节信息&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;view&lt;/td&gt;
&lt;td&gt;AbstractView&lt;/td&gt;
&lt;td&gt;与事件关联的抽象视图。等同于发生事件的window对象&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;this === currentTarget&lt;br&gt;&lt;/li&gt;
&lt;li&gt;target是事件真正的目标&lt;br&gt;&lt;/li&gt;
&lt;li&gt;当 eventPhase = 2 时，this = target = currentTarget&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;在需要通过一个函数处理多个事件时，可以使用type属性&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;lang=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;en&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;charset=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;test&lt;span class=&quot;nt&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;myDiv&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;click me&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;   
&lt;span class=&quot;nt&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;btn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;myDiv&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;handler&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'click'&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'clicked'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'mouseover'&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;
               &lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;backgroundColor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'red'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'mouseout'&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;
               &lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;backgroundColor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;btn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onclick&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;btn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onmouseover&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;btn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onmouseout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;     
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;取消事件默认行为&lt;/strong&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;test&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://www.cnblogs.com&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;链接&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onclick&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;preventDefault&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// window.event.returnValue = false;  // IE&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;阻止事件冒泡&lt;/strong&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;btn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;myBtn&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;btn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onclick&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'btn clicked'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;stopPropagation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// window.event.cancelBubble = true;  // IE&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onclick&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'body clicked'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;理解&lt;code&gt;stopImmediatePropagation()&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;stopImmediatePropagation()阻止的是同一类事件类型被执行&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;lang=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;en&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;charset=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;test&lt;span class=&quot;nt&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;myDiv&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;click me&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;   
&lt;span class=&quot;nt&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;btn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;myDiv&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;btn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'click'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'click one'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;stopImmediatePropagation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;btn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'click'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'click two'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;btn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'mouseover'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
         &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'mouseover'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;     
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;结果：&lt;br&gt;
鼠标移上去打印 mouseover，点击打印 click one&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;note&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;只有在事件处理程序执行期间，event对象才会存在；&lt;br&gt;
一旦事件处理程序完成，event对象就会被销毁。&lt;/p&gt;

&lt;h1 id=&quot;ie&quot;&gt;IE中的事件对象&lt;/h1&gt;

&lt;h2 id=&quot;ie-dom0-event&quot;&gt;IE中使用DOM0级事件处理程序的event&lt;/h2&gt;

&lt;p&gt;在使用DOM0级方法添加事件处理程序时，event对象作为window对象的一个属性存在&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;btn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;myBtn&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;btn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onclick&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// &quot;click&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;通过&lt;code&gt;window.event&lt;/code&gt;来获取event对象&lt;/p&gt;

&lt;h2 id=&quot;ie-dom2-event&quot;&gt;IE中DOM2事件处理程序的event&lt;/h2&gt;

&lt;p&gt;如果事件程序是使用attachEvent()添加的，那么就会有一个&lt;code&gt;event对象作为参数&lt;/code&gt;传入事件处理程序函数中。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;btn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;myBtn&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;btn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;attachEvent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;onclick&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// &quot;click&quot;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// console.log(window.event.type); // &quot;click&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;使用attachEvent()的情况下，也可以通过window对象来访问event对象，就像使用DOM0级方法时一样。&lt;/p&gt;

&lt;h2 id=&quot;ie-html-event&quot;&gt;IE中HTML事件处理程序的event&lt;/h2&gt;

&lt;p&gt;通过&lt;code&gt;event变量&lt;/code&gt;来访问event对象，与DOM中的事件模型相同&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;button&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;click me&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;onclick=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;alert(event.type)&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;ie&quot;&gt;IE中的事件对象通用属性和方法&lt;/h2&gt;

&lt;p&gt;IE中的事件对象都会包含下表所列的属性和方法&lt;/p&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;属性/方法&lt;/th&gt;
&lt;th&gt;类型&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;th&gt;读/写&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;type&lt;/td&gt;
&lt;td&gt;String&lt;/td&gt;
&lt;td&gt;被触发的事件类型&lt;/td&gt;
&lt;td&gt;只读&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;srcElement&lt;/td&gt;
&lt;td&gt;Element&lt;/td&gt;
&lt;td&gt;事件目标【 target 】&lt;/td&gt;
&lt;td&gt;只读&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;returnValue&lt;/td&gt;
&lt;td&gt;Boolean&lt;/td&gt;
&lt;td&gt;默认值为true，将其设置为false就可以取消事件的默认行为【 preventDefault() 】&lt;/td&gt;
&lt;td&gt;读/写&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;cancelBubble&lt;/td&gt;
&lt;td&gt;Boolean&lt;/td&gt;
&lt;td&gt;默认值为false，将其设置为true就可以取消事件冒泡【 stopPropagation() 】&lt;/td&gt;
&lt;td&gt;读/写&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;IE中DOM0级事件处理程序，this 可能= srcElement&lt;br&gt;&lt;/li&gt;
&lt;li&gt;IE中DOM2级事件处理程序，this = window&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;btn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;myBtn&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;btn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onclick&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;srcElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// true&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;btn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;attachEvent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'onclick'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;srcElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// false&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// true&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;IE取消事件默认行为&lt;/strong&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;test&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://www.cnblogs.com&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;链接&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onclick&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;returnValue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 
    &lt;span class=&quot;c1&quot;&gt;// e.preventDefault();  // DOM标准&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;IE阻止事件冒泡&lt;/strong&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;btn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;myBtn&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;btn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onclick&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'btn clicked'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cancelBubble&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  
    &lt;span class=&quot;c1&quot;&gt;// e.stopPropagation(); // DOM标准&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onclick&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'body clicked'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h1 id=&quot;event&quot;&gt;跨浏览器事件对象event&lt;/h1&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;EventUtil&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 添加事件&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;addHandler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;nx&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;attachEvent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;nx&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;attachEvent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;on&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;nx&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'on'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 移除事件&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;removeHandle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;removeEventListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;nx&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;removeEventListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;detachEvent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;nx&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;detachEvent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;on&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;nx&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'on'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 获取事件对象&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;getEvent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 获取事件目标&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;getTarget&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;target&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;srcElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 阻止事件默认行为&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;preventDefault&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;preventDefault&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;preventDefault&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;returnValue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 阻止事件冒泡&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;stopPropagation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;stopPropagation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;stopPropagation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cancelBubble&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;使用EventUtil对象&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;获取事件目标&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;btn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'myBtn'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;btn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onclick&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;EventUtil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getEvent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;target&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;EventUtil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getTarget&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;阻止事件默认行为&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;btn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'myBtn'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;btn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onclick&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;EventUtil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getEvent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;EventUtil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;preventDefault&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;阻止事件冒泡&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;btn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'myBtn'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;btn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onclick&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;EventUtil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getEvent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;EventUtil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;stopPropagation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id=&quot;more&quot;&gt;更多-more&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Event&quot;&gt;https://developer.mozilla.org/en-US/docs/Web/API/Event&lt;/a&gt;&lt;/p&gt;
</description>
                <link>/js/2017/10/25/js-event-object</link>
                <guid>/js/2017/10/25/js-event-object</guid>
                <pubDate>Wed, 25 Oct 2017 00:00:00 +0800</pubDate>
        </item>


</channel>
</rss>
